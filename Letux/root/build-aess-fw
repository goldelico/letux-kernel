#!/bin/bash
#
# build AESS firmware on destination device (e.g. PandaBoard, OMAP5EVM, Pyra, ...)
# cross-compile may need different approach
# tested on Debian 9.13
#
# Firware comes from https://github.com/omap-audio
#
# Caveats:
# - we have no idea where to find audio-test.git
# - the tests subdirectory assumes headers and constants (e.g. OMAP_ABE_DMEM)
# - these are nowhere available on an upstream Linux kernel
# - some location is e.g. https://android.googlesource.com/kernel/msm/+/android-msm-mako-3.4-jb-mr1.1/sound/soc/omap/abe/abe_mem.h
# - so we mix the letux kernel tree (headers) with this stuff
#

THIS="$PWD"
BRANCH=letux-5.16-rc8
VERSION=009590

#
# preparation of build host
#

echo +++ make sure we have the required build tools
apt-get install build-essential bison flex bc libssl-dev git autogen automake libtool || exit 1

echo +++ create and go to $PWD/aess
mkdir -p aess && cd aess || exit 1

#
# getting source trees
#

function gitfetch { # $1 = repo, $2 = subdir
	if ! [ -d $2 ]
	then
		rm -rf $2.tmp
		git clone --depth 1 -b $BRANCH $1 $2.tmp && mv $2.tmp $2 || return
	fi
}

echo +++ fetch the "(complete)" letux kernel source tree with minimal effort
gitfetch "--depth 1 -b $BRANCH https://github.com/goldelico/letux-kernel.git" letux-kernel.git || exit 1

LETUX="$PWD/letux-kernel.git"	# full source tree
LINUX="$PWD/linux-headers"	# installed headers

echo +++ fetch the omap4/5 firmware into a subdirectory
gitfetch "-b master https://github.com/omap-audio/abefw" abefw.git || exit 1

echo +++ fetch the audio-test code
gitfetch "-b master https://github.com/omap-audio/audio-test.git" audio-test.git

echo +++ fetch the asoc-fw tools
gitfetch "-b master https://github.com/omap-audio/asoc-fw.git" asoc-fw.git

#
# build kernel headers
#

echo +++ configure kernel and build generated headers
[ -f $LETUX/include/generated/uapi/linux/version.h ] || (cd $LETUX && make ARCH=arm letux_lpae_defconfig modules_prepare headers_install INSTALL_HDR_PATH=$LINUX && ln -sf asm-generic include/asm) || exit 1

#
# patch and build firmware
# NOTE: we should better fork the firmware repo and add a proper patch set...
#

(
cd abefw.git || exit

#echo +++ merge hack with HAL source "(we have not found a good and modern git repo)"
#[ -d letux-kernel.git/sound/soc/ti/abe ] || wget -O - https://android.googlesource.com/kernel/msm/+archive/529e46df76c9818f5e86ffe438d60c735e6e60cc.tar.gz |
#		(cd letux-kernel.git && tar xvzf - sound/soc/omap/abe --transform='s|/omap/|/ti/|' ) || exit 1

echo +++ modern kernel has replaced sound/soc/omap by sound/soc/ti
find tasks -type f -a ! -name '*.bak' -exec fgrep -q soc/omap {} \; -exec sed -i.bak 's|soc/omap|soc/ti|g' {} \;

echo +++ work around type conflicts between kernel source and /usr/include/stdint.h for uintptr_t or dev_t
fgrep -q host_uintptr_t src/abegen.h || sed -i.bak -e "s/#define __ABEGEN_H/#define __ABEGEN_H\n#define uintptr_t host_uintptr_t/" src/abegen.h
fgrep -q _SYS_TYPES_H tasks/009590/abe_asrc.c || sed -i.bak -e "s/#include <stddef.h>/#define _SYS_TYPES_H 1\n#include <stddef.h>/" tasks/009590/abe_asrc.c


echo +++ modern kernel has renamed some constants from ABE to AESS
#### falsch!!! abe_addr.c macht einen #include <abe_initxxx_labels.h> wo MM_DL_44P1_WPTR_labelID eigentlich drin sein sollte
# (nicht OMAP_AESS_PORT_)
# aber die Suchpfade stimmen nicht
#sed -i.bak -e 's/OMAP_AESS_PORT_/OMAP_AESS_PROTOCOL_/' \
#	    -e 's/MM_DL_44P1_WPTR_labelID/OMAP_AESS_SMEM_MM_DL_44P1_ID/' \
#	tasks/009590/abe_addr.c

# NOTE: modern aess-fw has no serial/dmareq ports...
sed -i.bak -e "s/OMAP_ABE_DMEM/OMAP_AESS_BANK_DMEM/" \
	   -e "s/OMAP_ABE_CMEM/OMAP_AESS_BANK_CMEM/" \
	   -e "s/OMAP_ABE_SMEM/OMAP_AESS_BANK_SMEM/" \
	   -e "s/OMAP_ABE_PORT_ACTIVITY_IDLE/OMAP_AESS_PORT_ACTIVITY_IDLE/" \
	   -e "s/OMAP_AESS_PORT_DMIC/OMAP_AESS_PHY_PORT_DMIC/" \
	   -e "s/OMAP_AESS_PORT_MCPDMUL/OMAP_AESS_PHY_PORT_PDM_UL/" \
	   -e "s/OMAP_AESS_PORT_MCPDMDL/OMAP_AESS_PHY_PORT_PDM_DL/" \
	   -e "s/OMAP_AESS_PORT_SERIAL/OMAP_AESS_LAST_PHY_PORT_ID/" \
	   -e "s/OMAP_AESS_PORT_DMAREQ/OMAP_AESS_LAST_PHY_PORT_ID/" \
	   -e "s/LAST_PORT_ID/OMAP_AESS_LAST_PHY_PORT_ID/" \
	   -e "s/ABE_DMASTATUS_RAW/AESS_DMASTATUS_RAW/" \
	tasks/009590/abe_addr.c
sed -i.bak -e "s/OMAP_ABE_VX_DL_PORT/OMAP_AESS_PHY_PORT_VX_DL/" \
	   -e "s/OMAP_ABE_VX_UL_PORT/OMAP_AESS_PHY_PORT_VX_UL/" \
	   -e "s/OMAP_ABE_BT_VX_UL_PORT/OMAP_AESS_PHY_PORT_BT_VX_UL/" \
	   -e "s/OMAP_ABE_BT_VX_DL_PORT/OMAP_AESS_PHY_PORT_BT_VX_DL/" \
	tasks/009590/abe_asrc.c

#echo +++ modern kernel already defines some constants in aess-fw.h which conflict with older abe_def.h and elsewhere
#sed -i.bak -e "s/#define CIRCULAR_BUFFER_PERIPHERAL_R__.*//" \
#	   -e "s/#define SRC_P .*//" \
#	   -e "s/#define SNK_P .*//" \
#	   -e "s/#define SRC_P .*//" \
#	   -e "s/#define SABE_TASK_ID_.*//" \
#	$LINUX/sound/soc/ti/abe/abe_def.h
#sed -i.bak -e "s/#define FEAT_.*//" $LINUX/sound/soc/ti/abe/abe_typ.h
#sed -i.bak -e "s/#define ABE_TASK_ID.*//" $LINUX/sound/soc/ti/abe/abe_api.h

#echo +++ append some central includes which are not included otherwise
#fgrep -q abe_api include/009590/abe_define.h || echo "#include <abe_api.h>
##include <abe_def.h>
##include <abe_mem.h>" >>include/009590/abe_define.h

echo +++ script assumes a different location of kernel sources in $HOME/source/linux.git
sed -i.bak "s|~/source/linux.git|$LETUX|g" scripts/abe-tool.sh

echo +++ fix automake for subdir-objects
sed -i.bak 's|no-define dist-bzip2|no-define subdir-objects dist-bzip2|g' configure.ac

echo +++ build the Makefiles
LC_ALL=C ./autogen.sh || exit 1

echo +++ avoid ./configure: line 4646: CC_NOUNDEFINED: command not found
sed -i.bak 's|CC_NOUNDEFINED||g' configure

echo +++ configure
# the configure option --with-hal-dir does not exist "(contrary to README)"
# ./configure --with-linux-dir=$LETUX --with-hal-dir=$PWD/hal || exit 1
./configure --with-linux-dir=$LETUX || exit 1

echo +++ patch include file search paths and some compiler options
# typical kernel gcc call: arm-linux-gnueabihf-gcc -Wp,-MMD,arch/arm/kernel/.perf_regs.o.d  -nostdinc -I./arch/arm/include -I./arch/arm/include/generated  -I./include -I./arch/arm/include/uapi -I./arch/arm/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/compiler-version.h -include ./include/linux/kconfig.h -include ./include/linux/compiler_types.h -D__KERNEL__ -mlittle-endian -Wall -Wundef -Werror=strict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE -Werror=implicit-function-declaration -Werror=implicit-int -Werror=return-type -Wno-format-security -std=gnu89 -fno-dwarf2-cfi-asm -fno-ipa-sra -mabi=aapcs-linux -mfpu=vfp -funwind-tables -mtp=cp15 -marm -Wa,-mno-warn-deprecated -D__LINUX_ARM_ARCH__=7 -march=armv7-a -msoft-float -Uarm -fno-delete-null-pointer-checks -Wno-frame-address -Os --param=allow-store-data-races=0 -Wframe-larger-than=1024 -fstack-protector-strong -Wno-main -Wno-unused-but-set-variable -Wno-unused-const-variable -fomit-frame-pointer -fno-inline-functions-called-once -Wdeclaration-after-statement -Wvla -Wno-pointer-sign -Wno-array-bounds -Wno-maybe-uninitialized -fno-strict-overflow -fno-stack-check -fconserve-stack -Werror=date-time -Werror=incompatible-pointer-types -Werror=designated-init    -DKBUILD_MODFILE='"arch/arm/kernel/perf_regs"' -DKBUILD_BASENAME='"perf_regs"' -DKBUILD_MODNAME='"perf_regs"' -D__KBUILD_MODNAME=kmod_perf_regs -c -o arch/arm/kernel/perf_regs.o arch/arm/kernel/perf_regs.c
# include linux headers
INCLUDES+=" -I $PWD//arch/arm/include"
INCLUDES+=" -I $LETUX/arch/arm/include/generated"
INCLUDES+=" -I $LETUX/include"
INCLUDES+=" -I $LETUX/arch/arm/include/uapi"
INCLUDES+=" -I $LETUX/arch/arm/include/generated/uapi"
INCLUDES+=" -I $LETUX/include/uapi"
INCLUDES+=" -I $LETUX/include/generated/uapi"
INCLUDES+=" -include $LETUX/include/linux/compiler-version.h"
INCLUDES+=" -include $LETUX/include/linux/kconfig.h"
INCLUDES+=" -include $LETUX/include/linux/compiler_types.h"
INCLUDES+=" -include $LETUX/include/linux/types.h"
INCLUDES+=" -D__KERNEL__"
# -mlittle-endian -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE
# -mabi=aapcs-linux -mfpu=vfp -funwind-tables -mtp=cp15 -marm
INCLUDES+=" -D__LINUX_ARM_ARCH__=7"
# -march=armv7-a -msoft-float -Uarm -fno-delete-null-pointer-checks -Os
# INCLUDES+=" -D__ASSEMBLY__"
# INCLUDES+=" -DARCH=arm"
# the following is the result of experimentation
#INCLUDES+=" -I ../include"
#INCLUDES+=" -I ."
#INCLUDES+=" -I $PWD/include/$VERSION"
INCLUDES+=" -I $PWD/tasks"
#INCLUDES+=" -I $PWD/../audio-test/tools/abe/abe_hal"	# for abe_api.h
# try fine control over system headers which may conflict with linux kernel tree headers
if false
then
INCLUDES+=" -nostdinc"
INCLUDES+=" -I /usr/lib/gcc/arm-linux-gnueabihf/6/include"
INCLUDES+=" -I /usr/local/include"
INCLUDES+=" -I /usr/lib/gcc/arm-linux-gnueabihf/6/include-fixed"
INCLUDES+=" -I /usr/include/arm-linux-gnueabihf"
INCLUDES+=" -I /usr/include"
fi

# we misuse this line for all the CFLAGS...
sed -i.bak "s|DEFAULT_INCLUDES =.*|DEFAULT_INCLUDES =$INCLUDES|g" tasks/Makefile

echo +++ make and install
make || exit 1
make install || exit 1

echo +++ generate data files
scripts/abe-tool.sh $VERSION || exit 1
) || exit

(
cd asoc-fw.git || exit

echo +++ patch lib.c and socfw.h so that we can use modern Linux headers
fgrep -q _SYS_TYPES_H src/lib.c || sed -i.bak -e "s/#include <stdlib.h>/#define _SYS_TYPES_H 1\n#include <stdlib.h>/" src/lib.c
fgrep -q '#undef' src/lib.c || sed -i.bak -e "s/#include <stdlib.h>/typedef int int32_t;\n#include <stdlib.h>\n#undef __always_inline\n#undef __extern_always_inline\n#undef __attribute_const__/" src/lib.c
fgrep -q '#include <sound/soc-dapm.h>' src/socfw.h || sed -i.bak -e "s|int8_t s8;|int8_t s8;\n\n#include <sound/soc-dapm.h>|" src/socfw.h
fgrep -q 'disable redefinition of these structs' src/socfw.h || sed -i.bak -e "s|/\* mixer control \*/|/* mixer control */\n\n#if 0 /* disable redefinition of these structs */|" -e "s|#endif|#endif\n#endif|" src/socfw.h
fgrep -q '// ec.max = ' src/lib.c || sed -i.bak -e "s|ec.max = menum->max;|// ec.max = menum->max; broken but not needed|" src/lib.c
fgrep -q '// ec.reg2 = ' src/lib.c || sed -i.bak -e "s|ec.reg2 = menum->reg2;|// ec.reg2 = menum->reg2; broken but not needed|" src/lib.c
fgrep -q '// widget.invert = ' src/lib.c || sed -i.bak -e "s|widget.invert = |// widget.invert = widgets[i].invert; broken but not needed|" src/lib.c

fgrep -q "struct snd_soc_fw_hdr {" src/socfw.h || cat >>src/socfw.h <<END

// taken from https://git.ti.com/cgit/lcpd-agross/omapdrm/plain/include/uapi/sound/asoc.h?id=c15a2d5a683de12f6768d0efb8df7ecd6aa9b3ed
// we should not append here but add to include/uapi/sound/asoc.h in a way to the Letux kernel sources so that we can eventually upstream it as a patch

/*
 * linux/uapi/sound/asoc.h -- ALSA SoC Firmware Controls and DAPM
 *
 * Author:		Liam Girdwood
 * Created:		Aug 11th 2005
 * Copyright:	Wolfson Microelectronics. PLC.
 *              2012 Texas Instruments Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * Simple file API to load FW that includes mixers, coefficients, DAPM graphs,
 * algorithms, equalisers, DAIs, widgets etc.
 */

#ifndef __LINUX_UAPI_SND_ASOC_SOCFW_H
#define __LINUX_UAPI_SND_ASOC_SOCFW_H

// #include <linux/types.h>

/*
 * Convenience kcontrol builders
 */
#define SOC_DOUBLE_VALUE(xreg, shift_left, shift_right, xmax, xinvert) \
	((unsigned long)&(struct soc_mixer_control) \
	{.reg = xreg, .rreg = xreg, .shift = shift_left, \
	.rshift = shift_right, .max = xmax, .platform_max = xmax, \
	.invert = xinvert})
#define SOC_SINGLE_VALUE(xreg, xshift, xmax, xinvert) \
	SOC_DOUBLE_VALUE(xreg, xshift, xshift, xmax, xinvert)
#define SOC_SINGLE_VALUE_EXT(xreg, xmax, xinvert) \
	((unsigned long)&(struct soc_mixer_control) \
	{.reg = xreg, .max = xmax, .platform_max = xmax, .invert = xinvert})
#define SOC_DOUBLE_R_VALUE(xlreg, xrreg, xshift, xmax, xinvert) \
	((unsigned long)&(struct soc_mixer_control) \
	{.reg = xlreg, .rreg = xrreg, .shift = xshift, .rshift = xshift, \
	.max = xmax, .platform_max = xmax, .invert = xinvert})
#define SOC_DOUBLE_R_RANGE_VALUE(xlreg, xrreg, xshift, xmin, xmax, xinvert) \
	((unsigned long)&(struct soc_mixer_control) \
	{.reg = xlreg, .rreg = xrreg, .shift = xshift, .rshift = xshift, \
	.min = xmin, .max = xmax, .platform_max = xmax, .invert = xinvert})
#define SOC_SINGLE(xname, reg, shift, max, invert) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.info = snd_soc_info_volsw, .get = snd_soc_get_volsw,\
	.put = snd_soc_put_volsw, .index = SOC_CONTROL_IO_VOLSW, \
	.private_value =  SOC_SINGLE_VALUE(reg, shift, max, invert) }
#define SOC_SINGLE_RANGE(xname, xreg, xshift, xmin, xmax, xinvert) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname),\
	.info = snd_soc_info_volsw_range, .get = snd_soc_get_volsw_range, \
	.put = snd_soc_put_volsw_range, .index = SOC_CONTROL_IO_RANGE, \
	.private_value = (unsigned long)&(struct soc_mixer_control) \
		{.reg = xreg, .shift = xshift, .min = xmin,\
		 .max = xmax, .platform_max = xmax, .invert = xinvert} }
#define SOC_SINGLE_TLV(xname, reg, shift, max, invert, tlv_array) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ |\
		 SNDRV_CTL_ELEM_ACCESS_READWRITE,\
	.tlv.p = (tlv_array), \
	.info = snd_soc_info_volsw, .get = snd_soc_get_volsw,\
	.put = snd_soc_put_volsw, .index = SOC_CONTROL_IO_VOLSW, \
	.private_value =  SOC_SINGLE_VALUE(reg, shift, max, invert) }
#define SOC_SINGLE_SX_TLV(xname, xreg, xshift, xmin, xmax, tlv_array) \
{       .iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ | \
	SNDRV_CTL_ELEM_ACCESS_READWRITE, \
	.tlv.p  = (tlv_array),\
	.info = snd_soc_info_volsw, \
	.get = snd_soc_get_volsw_sx,\
	.put = snd_soc_put_volsw_sx, \
	.index = SOC_CONTROL_IO_VOLSW_SX, \
	.private_value = (unsigned long)&(struct soc_mixer_control) \
		{.reg = xreg, .rreg = xreg, \
		.shift = xshift, .rshift = xshift, \
		.max = xmax, .min = xmin} }
#define SOC_SINGLE_RANGE_TLV(xname, xreg, xshift, xmin, xmax, xinvert, tlv_array) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname),\
	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ |\
		 SNDRV_CTL_ELEM_ACCESS_READWRITE,\
	.tlv.p = (tlv_array), \
	.info = snd_soc_info_volsw_range, .index = SOC_CONTROL_IO_RANGE, \
	.get = snd_soc_get_volsw_range, .put = snd_soc_put_volsw_range, \
	.private_value = (unsigned long)&(struct soc_mixer_control) \
		{.reg = xreg, .shift = xshift, .min = xmin,\
		 .max = xmax, .platform_max = xmax, .invert = xinvert} }
#define SOC_DOUBLE(xname, reg, shift_left, shift_right, max, invert) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname),\
	.info = snd_soc_info_volsw, .get = snd_soc_get_volsw, \
	.put = snd_soc_put_volsw, .index = SOC_CONTROL_IO_VOLSW, \
	.private_value = SOC_DOUBLE_VALUE(reg, shift_left, shift_right, \
					  max, invert) }
#define SOC_DOUBLE_R(xname, reg_left, reg_right, xshift, xmax, xinvert) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname), \
	.info = snd_soc_info_volsw, .index = SOC_CONTROL_IO_VOLSW, \
	.get = snd_soc_get_volsw, .put = snd_soc_put_volsw, \
	.private_value = SOC_DOUBLE_R_VALUE(reg_left, reg_right, xshift, \
					    xmax, xinvert) }
#define SOC_DOUBLE_R_RANGE(xname, reg_left, reg_right, xshift, xmin, \
			   xmax, xinvert)		\
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname),\
	.info = snd_soc_info_volsw_range, .index = SOC_CONTROL_IO_RANGE, \
	.get = snd_soc_get_volsw_range, .put = snd_soc_put_volsw_range, \
	.private_value = SOC_DOUBLE_R_RANGE_VALUE(reg_left, reg_right, \
					    xshift, xmin, xmax, xinvert) }
#define SOC_DOUBLE_TLV(xname, reg, shift_left, shift_right, max, invert, tlv_array) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname),\
	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ |\
		 SNDRV_CTL_ELEM_ACCESS_READWRITE,\
	.tlv.p = (tlv_array), \
	.info = snd_soc_info_volsw, .get = snd_soc_get_volsw, \
	.put = snd_soc_put_volsw, .index = SOC_CONTROL_IO_VOLSW, \
	.private_value = SOC_DOUBLE_VALUE(reg, shift_left, shift_right, \
					  max, invert) }
#define SOC_DOUBLE_R_TLV(xname, reg_left, reg_right, xshift, xmax, xinvert, tlv_array) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname),\
	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ |\
		 SNDRV_CTL_ELEM_ACCESS_READWRITE,\
	.tlv.p = (tlv_array), \
	.info = snd_soc_info_volsw, .index = SOC_CONTROL_IO_VOLSW, \
	.get = snd_soc_get_volsw, .put = snd_soc_put_volsw, \
	.private_value = SOC_DOUBLE_R_VALUE(reg_left, reg_right, xshift, \
					    xmax, xinvert) }
#define SOC_DOUBLE_R_RANGE_TLV(xname, reg_left, reg_right, xshift, xmin, \
			       xmax, xinvert, tlv_array)		\
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname),\
	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ |\
		 SNDRV_CTL_ELEM_ACCESS_READWRITE,\
	.tlv.p = (tlv_array), \
	.info = snd_soc_info_volsw_range, .index = SOC_CONTROL_IO_RANGE, \
	.get = snd_soc_get_volsw_range, .put = snd_soc_put_volsw_range, \
	.private_value = SOC_DOUBLE_R_RANGE_VALUE(reg_left, reg_right, \
					    xshift, xmin, xmax, xinvert) }
#define SOC_DOUBLE_R_SX_TLV(xname, xreg, xrreg, xshift, xmin, xmax, tlv_array) \
{       .iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname), \
	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ | \
	SNDRV_CTL_ELEM_ACCESS_READWRITE, \
	.tlv.p  = (tlv_array), \
	.info = snd_soc_info_volsw, \
	.get = snd_soc_get_volsw_sx, \
	.put = snd_soc_put_volsw_sx, \
	.index = SOC_CONTROL_IO_VOLSW, \
	.private_value = (unsigned long)&(struct soc_mixer_control) \
		{.reg = xreg, .rreg = xrreg, \
		.shift = xshift, .rshift = xshift, \
		.max = xmax, .min = xmin} }
#define SOC_DOUBLE_S8_TLV(xname, xreg, xmin, xmax, tlv_array) \
{	.iface  = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname), \
	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ | \
		  SNDRV_CTL_ELEM_ACCESS_READWRITE, \
	.tlv.p  = (tlv_array), \
	.info   = snd_soc_info_volsw_s8, .get = snd_soc_get_volsw_s8, \
	.put    = snd_soc_put_volsw_s8, .index = SOC_CONTROL_IO_VOLSW_S8, \
	.private_value = (unsigned long)&(struct soc_mixer_control) \
		{.reg = xreg, .min = xmin, .max = xmax, \
		 .platform_max = xmax} }
#define SOC_ENUM_DOUBLE(xreg, xshift_l, xshift_r, xmax, xtexts) \
{	.reg = xreg, .shift_l = xshift_l, .shift_r = xshift_r, \
	.max = xmax, .texts = xtexts, \
	.mask = xmax ? roundup_pow_of_two(xmax) - 1 : 0}
#define SOC_ENUM_SINGLE(xreg, xshift, xmax, xtexts) \
	SOC_ENUM_DOUBLE(xreg, xshift, xshift, xmax, xtexts)
#define SOC_ENUM_SINGLE_EXT(xmax, xtexts) \
{	.max = xmax, .texts = xtexts }
#define SOC_VALUE_ENUM_DOUBLE(xreg, xshift_l, xshift_r, xmask, xmax, xtexts, xvalues) \
{	.reg = xreg, .shift_l = xshift_l, .shift_r = xshift_r, \
	.mask = xmask, .max = xmax, .texts = xtexts, .values = xvalues}
#define SOC_VALUE_ENUM_SINGLE(xreg, xshift, xmask, xmax, xtexts, xvalues) \
	SOC_VALUE_ENUM_DOUBLE(xreg, xshift, xshift, xmask, xmax, xtexts, xvalues)
#define SOC_ENUM(xname, xenum) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname,\
	.info = snd_soc_info_enum_double, .index = SOC_CONTROL_IO_ENUM, \
	.get = snd_soc_get_enum_double, .put = snd_soc_put_enum_double, \
	.private_value = (unsigned long)&xenum }
#define SOC_VALUE_ENUM(xname, xenum) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname,\
	.info = snd_soc_info_enum_double, \
	.get = snd_soc_get_value_enum_double, \
	.put = snd_soc_put_value_enum_double, \
	.index = SOC_CONTROL_IO_ENUM_VALUE, \
	.private_value = (unsigned long)&xenum }
#define SOC_SINGLE_EXT(xname, xreg, xshift, xmax, xinvert,\
	 xhandler_get, xhandler_put) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.info = snd_soc_info_volsw, .index = SOC_CONTROL_IO_EXT, \
	.get = xhandler_get, .put = xhandler_put, \
	.private_value = SOC_SINGLE_VALUE(xreg, xshift, xmax, xinvert) }
#define SOC_DOUBLE_EXT(xname, reg, shift_left, shift_right, max, invert,\
	 xhandler_get, xhandler_put) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname),\
	.info = snd_soc_info_volsw, .index = SOC_CONTROL_IO_EXT, \
	.get = xhandler_get, .put = xhandler_put, \
	.private_value = \
		SOC_DOUBLE_VALUE(reg, shift_left, shift_right, max, invert) }
#define SOC_SINGLE_EXT_TLV(xname, xreg, xshift, xmax, xinvert,\
	 xhandler_get, xhandler_put, tlv_array) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ |\
		 SNDRV_CTL_ELEM_ACCESS_READWRITE,\
	.tlv.p = (tlv_array), \
	.info = snd_soc_info_volsw, .index = SOC_CONTROL_IO_EXT, \
	.get = xhandler_get, .put = xhandler_put, \
	.private_value = SOC_SINGLE_VALUE(xreg, xshift, xmax, xinvert) }
#define SOC_DOUBLE_EXT_TLV(xname, xreg, shift_left, shift_right, xmax, xinvert,\
	 xhandler_get, xhandler_put, tlv_array) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname), \
	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ | \
		 SNDRV_CTL_ELEM_ACCESS_READWRITE, \
	.tlv.p = (tlv_array), \
	.info = snd_soc_info_volsw, .index = SOC_CONTROL_IO_EXT,\
	.get = xhandler_get, .put = xhandler_put, \
	.private_value = SOC_DOUBLE_VALUE(xreg, shift_left, shift_right, \
					  xmax, xinvert) }
#define SOC_DOUBLE_R_EXT_TLV(xname, reg_left, reg_right, xshift, xmax, xinvert,\
	 xhandler_get, xhandler_put, tlv_array) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname), \
	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ | \
		 SNDRV_CTL_ELEM_ACCESS_READWRITE, \
	.tlv.p = (tlv_array), \
	.info = snd_soc_info_volsw, .index = SOC_CONTROL_IO_EXT, \
	.get = xhandler_get, .put = xhandler_put, \
	.private_value = SOC_DOUBLE_R_VALUE(reg_left, reg_right, xshift, \
					    xmax, xinvert) }
#define SOC_SINGLE_BOOL_EXT(xname, xdata, xhandler_get, xhandler_put) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.info = snd_soc_info_bool_ext, .index = SOC_CONTROL_IO_BOOL_EXT, \
	.get = xhandler_get, .put = xhandler_put, \
	.private_value = xdata }
#define SOC_ENUM_EXT(xname, xenum, xhandler_get, xhandler_put) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.info = snd_soc_info_enum_ext, .index = SOC_CONTROL_IO_ENUM_EXT, \
	.get = xhandler_get, .put = xhandler_put, \
	.private_value = (unsigned long)&xenum }

#define SND_SOC_BYTES(xname, xbase, xregs)		      \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname,   \
	.info = snd_soc_bytes_info, .get = snd_soc_bytes_get, \
	.index = SOC_CONTROL_IO_BYTES, \
	.put = snd_soc_bytes_put, .private_value =	      \
		((unsigned long)&(struct soc_bytes)           \
		{.base = xbase, .num_regs = xregs }) }

#define SND_SOC_BYTES_MASK(xname, xbase, xregs, xmask)	      \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname,   \
	.info = snd_soc_bytes_info, .get = snd_soc_bytes_get, \
	.index = SOC_CONTROL_IO_BYTES, \
	.put = snd_soc_bytes_put, .private_value =	      \
		((unsigned long)&(struct soc_bytes)           \
		{.base = xbase, .num_regs = xregs,	      \
		 .mask = xmask }) }

#define SOC_SINGLE_XR_SX(xname, xregbase, xregcount, xnbits, \
		xmin, xmax, xinvert) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname), \
	.info = snd_soc_info_xr_sx, .get = snd_soc_get_xr_sx, \
	.put = snd_soc_put_xr_sx, \
	.index = SOC_CONTROL_IO_VOLSW_XR_SX, \
	.private_value = (unsigned long)&(struct soc_mreg_control) \
		{.regbase = xregbase, .regcount = xregcount, .nbits = xnbits, \
		.invert = xinvert, .min = xmin, .max = xmax} }

#define SOC_SINGLE_STROBE(xname, xreg, xshift, xinvert) \
	SOC_SINGLE_EXT(xname, xreg, xshift, 1, xinvert, \
		snd_soc_get_strobe, snd_soc_put_strobe)

/*
 * Simplified versions of above macros, declaring a struct and calculating
 * ARRAY_SIZE internally
 */
#define SOC_ENUM_DOUBLE_DECL(name, xreg, xshift_l, xshift_r, xtexts) \
	struct soc_enum name = SOC_ENUM_DOUBLE(xreg, xshift_l, xshift_r, \
						ARRAY_SIZE(xtexts), xtexts)
#define SOC_ENUM_SINGLE_DECL(name, xreg, xshift, xtexts) \
	SOC_ENUM_DOUBLE_DECL(name, xreg, xshift, xshift, xtexts)
#define SOC_ENUM_SINGLE_EXT_DECL(name, xtexts) \
	struct soc_enum name = SOC_ENUM_SINGLE_EXT(ARRAY_SIZE(xtexts), xtexts)
#define SOC_VALUE_ENUM_DOUBLE_DECL(name, xreg, xshift_l, xshift_r, xmask, xtexts, xvalues) \
	struct soc_enum name = SOC_VALUE_ENUM_DOUBLE(xreg, xshift_l, xshift_r, xmask, \
							ARRAY_SIZE(xtexts), xtexts, xvalues)
#define SOC_VALUE_ENUM_SINGLE_DECL(name, xreg, xshift, xmask, xtexts, xvalues) \
	SOC_VALUE_ENUM_DOUBLE_DECL(name, xreg, xshift, xshift, xmask, xtexts, xvalues)


/*
 * Numeric IDs for stock mixer types that are used to enumerate FW based mixers.
 */

// we add a cast to int because p and g are function pointers (strangely)
#define SOC_CONTROL_ID_PUT(p)	((((int)p) & 0xff) << 16)
#define SOC_CONTROL_ID_GET(g)	((((int)g) & 0xff) << 8)
#define SOC_CONTROL_ID_INFO(i)	((i & 0xff) << 0)
#define SOC_CONTROL_ID(g, p, i)	\
	(SOC_CONTROL_ID_PUT(p) | SOC_CONTROL_ID_GET(g) |\
	SOC_CONTROL_ID_INFO(i))

#define SOC_CONTROL_GET_ID_PUT(id)	((id & 0xff0000) >> 16)
#define SOC_CONTROL_GET_ID_GET(id)	((id & 0x00ff00) >> 8)
#define SOC_CONTROL_GET_ID_INFO(id)	((id & 0x0000ff) >> 0)

/* individual kcontrol info types - can be mixed with other types */
#define SOC_CONTROL_TYPE_EXT		0	/* driver defined */
#define SOC_CONTROL_TYPE_VOLSW		1
#define SOC_CONTROL_TYPE_VOLSW_SX	2
#define SOC_CONTROL_TYPE_VOLSW_S8	3
#define SOC_CONTROL_TYPE_VOLSW_XR_SX	4
#define SOC_CONTROL_TYPE_ENUM		6
#define SOC_CONTROL_TYPE_ENUM_EXT	7
#define SOC_CONTROL_TYPE_BYTES		8
#define SOC_CONTROL_TYPE_BOOL_EXT	9
#define SOC_CONTROL_TYPE_ENUM_VALUE	10
#define SOC_CONTROL_TYPE_RANGE		11
#define SOC_CONTROL_TYPE_STROBE		12

/* compound control IDs */
#define SOC_CONTROL_IO_VOLSW \
	SOC_CONTROL_ID(SOC_CONTROL_TYPE_VOLSW, \
		SOC_CONTROL_TYPE_VOLSW, \
		SOC_CONTROL_TYPE_VOLSW)
#define SOC_CONTROL_IO_VOLSW_SX \
	SOC_CONTROL_ID(SOC_CONTROL_TYPE_VOLSW_SX, \
		SOC_CONTROL_TYPE_VOLSW_SX, \
		SOC_CONTROL_TYPE_VOLSW)
#define SOC_CONTROL_IO_VOLSW_S8 \
	SOC_CONTROL_ID(SOC_CONTROL_TYPE_VOLSW_S8, \
		SOC_CONTROL_TYPE_VOLSW_S8, \
		SOC_CONTROL_TYPE_VOLSW_S8)
#define SOC_CONTROL_IO_VOLSW_XR_SX \
	SOC_CONTROL_ID(SOC_CONTROL_TYPE_VOLSW_XR_SX, \
		SOC_CONTROL_TYPE_VOLSW_XR_SX, \
		SOC_CONTROL_TYPE_VOLSW_XR_SX)
#define SOC_CONTROL_IO_EXT \
	SOC_CONTROL_ID(SOC_CONTROL_TYPE_EXT, \
		SOC_CONTROL_TYPE_EXT, \
		SOC_CONTROL_TYPE_VOLSW)
#define SOC_CONTROL_IO_ENUM \
	SOC_CONTROL_ID(SOC_CONTROL_TYPE_ENUM, \
		SOC_CONTROL_TYPE_ENUM, \
		SOC_CONTROL_TYPE_ENUM)
#define SOC_CONTROL_IO_ENUM_EXT \
	SOC_CONTROL_ID(SOC_CONTROL_TYPE_EXT, \
		SOC_CONTROL_TYPE_EXT, \
		SOC_CONTROL_TYPE_ENUM_EXT)
#define SOC_CONTROL_IO_BYTES \
	SOC_CONTROL_ID(SOC_CONTROL_TYPE_BYTES, \
		SOC_CONTROL_TYPE_BYTES, \
		SOC_CONTROL_TYPE_BYTES)
#define SOC_CONTROL_IO_BOOL_EXT \
	SOC_CONTROL_ID(SOC_CONTROL_TYPE_EXT, \
		SOC_CONTROL_TYPE_EXT, \
		SOC_CONTROL_TYPE_BOOL_EXT)
#define SOC_CONTROL_IO_ENUM_VALUE \
	SOC_CONTROL_ID(SOC_CONTROL_TYPE_ENUM_VALUE, \
		SOC_CONTROL_TYPE_ENUM_VALUE, \
		SOC_CONTROL_TYPE_ENUM)
#define SOC_CONTROL_IO_RANGE \
	SOC_CONTROL_ID(SOC_CONTROL_TYPE_RANGE, \
		SOC_CONTROL_TYPE_RANGE, \
		SOC_CONTROL_TYPE_RANGE)
#define SOC_CONTROL_IO_STROBE \
	SOC_CONTROL_ID(SOC_CONTROL_TYPE_STROBE, \
		SOC_CONTROL_TYPE_STROBE, \
		SOC_CONTROL_TYPE_STROBE)

#if 0	// already defined in soc-dapm.h

/* widget has no PM register bit */
#define SND_SOC_NOPM	-1

/*
 * SoC dynamic audio power management
 *
 * We can have up to 4 power domains
 *  1. Codec domain - VREF, VMID
 *     Usually controlled at codec probe/remove, although can be set
 *     at stream time if power is not needed for sidetone, etc.
 *  2. Platform/Machine domain - physically connected inputs and outputs
 *     Is platform/machine and user action specific, is set in the machine
 *     driver and by userspace e.g when HP are inserted
 *  3. Path domain - Internal codec path mixers
 *     Are automatically set when mixer and mux settings are
 *     changed by the user.
 *  4. Stream domain - DAC's and ADC's.
 *     Enabled when stream playback/capture is started.
 */

/* codec domain */
#define SND_SOC_DAPM_VMID(wname) \
{	.id = snd_soc_dapm_vmid, .name = wname, .kcontrol_news = NULL, \
	.num_kcontrols = 0}

/* platform domain */
#define SND_SOC_DAPM_SIGGEN(wname) \
{	.id = snd_soc_dapm_siggen, .name = wname, .kcontrol_news = NULL, \
	.num_kcontrols = 0, .reg = SND_SOC_NOPM }
#define SND_SOC_DAPM_INPUT(wname) \
{	.id = snd_soc_dapm_input, .name = wname, .kcontrol_news = NULL, \
	.num_kcontrols = 0, .reg = SND_SOC_NOPM }
#define SND_SOC_DAPM_OUTPUT(wname) \
{	.id = snd_soc_dapm_output, .name = wname, .kcontrol_news = NULL, \
	.num_kcontrols = 0, .reg = SND_SOC_NOPM }
#define SND_SOC_DAPM_MIC(wname, wevent) \
{	.id = snd_soc_dapm_mic, .name = wname, .kcontrol_news = NULL, \
	.num_kcontrols = 0, .reg = SND_SOC_NOPM, .event = wevent, \
	.event_flags = SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD}
#define SND_SOC_DAPM_HP(wname, wevent) \
{	.id = snd_soc_dapm_hp, .name = wname, .kcontrol_news = NULL, \
	.num_kcontrols = 0, .reg = SND_SOC_NOPM, .event = wevent, \
	.event_flags = SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_PRE_PMD}
#define SND_SOC_DAPM_SPK(wname, wevent) \
{	.id = snd_soc_dapm_spk, .name = wname, .kcontrol_news = NULL, \
	.num_kcontrols = 0, .reg = SND_SOC_NOPM, .event = wevent, \
	.event_flags = SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_PRE_PMD}
#define SND_SOC_DAPM_LINE(wname, wevent) \
{	.id = snd_soc_dapm_line, .name = wname, .kcontrol_news = NULL, \
	.num_kcontrols = 0, .reg = SND_SOC_NOPM, .event = wevent, \
	.event_flags = SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_PRE_PMD}

/* path domain */
#define SND_SOC_DAPM_PGA(wname, wreg, wshift, winvert,\
	 wcontrols, wncontrols) \
{	.id = snd_soc_dapm_pga, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = wncontrols}
#define SND_SOC_DAPM_OUT_DRV(wname, wreg, wshift, winvert,\
	 wcontrols, wncontrols) \
{	.id = snd_soc_dapm_out_drv, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = wncontrols}
#define SND_SOC_DAPM_MIXER(wname, wreg, wshift, winvert, \
	 wcontrols, wncontrols)\
{	.id = snd_soc_dapm_mixer, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = wncontrols}
#define SND_SOC_DAPM_MIXER_NAMED_CTL(wname, wreg, wshift, winvert, \
	 wcontrols, wncontrols)\
{       .id = snd_soc_dapm_mixer_named_ctl, .name = wname, .reg = wreg, \
	.shift = wshift, .invert = winvert, .kcontrol_news = wcontrols, \
	.num_kcontrols = wncontrols}
#define SND_SOC_DAPM_MICBIAS(wname, wreg, wshift, winvert) \
{	.id = snd_soc_dapm_micbias, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = NULL, .num_kcontrols = 0}
#define SND_SOC_DAPM_SWITCH(wname, wreg, wshift, winvert, wcontrols) \
{	.id = snd_soc_dapm_switch, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = 1}
#define SND_SOC_DAPM_MUX(wname, wreg, wshift, winvert, wcontrols) \
{	.id = snd_soc_dapm_mux, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = 1}
#define SND_SOC_DAPM_VIRT_MUX(wname, wreg, wshift, winvert, wcontrols) \
{	.id = snd_soc_dapm_virt_mux, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = 1}
#define SND_SOC_DAPM_VALUE_MUX(wname, wreg, wshift, winvert, wcontrols) \
{	.id = snd_soc_dapm_value_mux, .name = wname, .reg = wreg, \
	.shift = wshift, .invert = winvert, .kcontrol_news = wcontrols, \
	.num_kcontrols = 1}

/* Simplified versions of above macros, assuming wncontrols = ARRAY_SIZE(wcontrols) */
#define SOC_PGA_ARRAY(wname, wreg, wshift, winvert,\
	 wcontrols) \
{	.id = snd_soc_dapm_pga, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = ARRAY_SIZE(wcontrols)}
#define SOC_MIXER_ARRAY(wname, wreg, wshift, winvert, \
	 wcontrols)\
{	.id = snd_soc_dapm_mixer, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = ARRAY_SIZE(wcontrols)}
#define SOC_MIXER_NAMED_CTL_ARRAY(wname, wreg, wshift, winvert, \
	 wcontrols)\
{       .id = snd_soc_dapm_mixer_named_ctl, .name = wname, .reg = wreg, \
	.shift = wshift, .invert = winvert, .kcontrol_news = wcontrols, \
	.num_kcontrols = ARRAY_SIZE(wcontrols)}

/* path domain with event - event handler must return 0 for success */
#define SND_SOC_DAPM_PGA_E(wname, wreg, wshift, winvert, wcontrols, \
	wncontrols, wevent, wflags) \
{	.id = snd_soc_dapm_pga, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = wncontrols, \
	.event = wevent, .event_flags = wflags}
#define SND_SOC_DAPM_OUT_DRV_E(wname, wreg, wshift, winvert, wcontrols, \
	wncontrols, wevent, wflags) \
{	.id = snd_soc_dapm_out_drv, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = wncontrols, \
	.event = wevent, .event_flags = wflags}
#define SND_SOC_DAPM_MIXER_E(wname, wreg, wshift, winvert, wcontrols, \
	wncontrols, wevent, wflags) \
{	.id = snd_soc_dapm_mixer, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = wncontrols, \
	.event = wevent, .event_flags = wflags}
#define SND_SOC_DAPM_MIXER_NAMED_CTL_E(wname, wreg, wshift, winvert, \
	wcontrols, wncontrols, wevent, wflags) \
{       .id = snd_soc_dapm_mixer, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, \
	.num_kcontrols = wncontrols, .event = wevent, .event_flags = wflags}
#define SND_SOC_DAPM_SWITCH_E(wname, wreg, wshift, winvert, wcontrols, \
	wevent, wflags) \
{	.id = snd_soc_dapm_switch, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = 1, \
	.event = wevent, .event_flags = wflags}
#define SND_SOC_DAPM_MUX_E(wname, wreg, wshift, winvert, wcontrols, \
	wevent, wflags) \
{	.id = snd_soc_dapm_mux, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = 1, \
	.event = wevent, .event_flags = wflags}
#define SND_SOC_DAPM_VIRT_MUX_E(wname, wreg, wshift, winvert, wcontrols, \
	wevent, wflags) \
{	.id = snd_soc_dapm_virt_mux, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = 1, \
	.event = wevent, .event_flags = wflags}

/* additional sequencing control within an event type */
#define SND_SOC_DAPM_PGA_S(wname, wsubseq, wreg, wshift, winvert, \
	wevent, wflags) \
{	.id = snd_soc_dapm_pga, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .event = wevent, .event_flags = wflags, \
	.subseq = wsubseq}
#define SND_SOC_DAPM_SUPPLY_S(wname, wsubseq, wreg, wshift, winvert, wevent, \
	wflags)	\
{	.id = snd_soc_dapm_supply, .name = wname, .reg = wreg,	\
	.shift = wshift, .invert = winvert, .event = wevent, \
	.event_flags = wflags, .subseq = wsubseq}

/* Simplified versions of above macros, assuming wncontrols = ARRAY_SIZE(wcontrols) */
#define SOC_PGA_E_ARRAY(wname, wreg, wshift, winvert, wcontrols, \
	wevent, wflags) \
{	.id = snd_soc_dapm_pga, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = ARRAY_SIZE(wcontrols), \
	.event = wevent, .event_flags = wflags}
#define SOC_MIXER_E_ARRAY(wname, wreg, wshift, winvert, wcontrols, \
	wevent, wflags) \
{	.id = snd_soc_dapm_mixer, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, .num_kcontrols = ARRAY_SIZE(wcontrols), \
	.event = wevent, .event_flags = wflags}
#define SOC_MIXER_NAMED_CTL_E_ARRAY(wname, wreg, wshift, winvert, \
	wcontrols, wevent, wflags) \
{       .id = snd_soc_dapm_mixer, .name = wname, .reg = wreg, .shift = wshift, \
	.invert = winvert, .kcontrol_news = wcontrols, \
	.num_kcontrols = ARRAY_SIZE(wcontrols), .event = wevent, .event_flags = wflags}

/* events that are pre and post DAPM */
#define SND_SOC_DAPM_PRE(wname, wevent) \
{	.id = snd_soc_dapm_pre, .name = wname, .kcontrol_news = NULL, \
	.num_kcontrols = 0, .reg = SND_SOC_NOPM, .event = wevent, \
	.event_flags = SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_PRE_PMD}
#define SND_SOC_DAPM_POST(wname, wevent) \
{	.id = snd_soc_dapm_post, .name = wname, .kcontrol_news = NULL, \
	.num_kcontrols = 0, .reg = SND_SOC_NOPM, .event = wevent, \
	.event_flags = SND_SOC_DAPM_POST_PMU | SND_SOC_DAPM_POST_PMD}

/* stream domain */
#define SND_SOC_DAPM_AIF_IN(wname, stname, wslot, wreg, wshift, winvert) \
{	.id = snd_soc_dapm_aif_in, .name = wname, .sname = stname, \
	.reg = wreg, .shift = wshift, .invert = winvert }
#define SND_SOC_DAPM_AIF_IN_E(wname, stname, wslot, wreg, wshift, winvert, \
			      wevent, wflags)				\
{	.id = snd_soc_dapm_aif_in, .name = wname, .sname = stname, \
	.reg = wreg, .shift = wshift, .invert = winvert, \
	.event = wevent, .event_flags = wflags }
#define SND_SOC_DAPM_AIF_OUT(wname, stname, wslot, wreg, wshift, winvert) \
{	.id = snd_soc_dapm_aif_out, .name = wname, .sname = stname, \
	.reg = wreg, .shift = wshift, .invert = winvert }
#define SND_SOC_DAPM_AIF_OUT_E(wname, stname, wslot, wreg, wshift, winvert, \
			     wevent, wflags)				\
{	.id = snd_soc_dapm_aif_out, .name = wname, .sname = stname, \
	.reg = wreg, .shift = wshift, .invert = winvert, \
	.event = wevent, .event_flags = wflags }
#define SND_SOC_DAPM_DAC(wname, stname, wreg, wshift, winvert) \
{	.id = snd_soc_dapm_dac, .name = wname, .sname = stname, .reg = wreg, \
	.shift = wshift, .invert = winvert}
#define SND_SOC_DAPM_DAC_E(wname, stname, wreg, wshift, winvert, \
			   wevent, wflags)				\
{	.id = snd_soc_dapm_dac, .name = wname, .sname = stname, .reg = wreg, \
	.shift = wshift, .invert = winvert, \
	.event = wevent, .event_flags = wflags}
#define SND_SOC_DAPM_ADC(wname, stname, wreg, wshift, winvert) \
{	.id = snd_soc_dapm_adc, .name = wname, .sname = stname, .reg = wreg, \
	.shift = wshift, .invert = winvert}
#define SND_SOC_DAPM_ADC_E(wname, stname, wreg, wshift, winvert, \
			   wevent, wflags)				\
{	.id = snd_soc_dapm_adc, .name = wname, .sname = stname, .reg = wreg, \
	.shift = wshift, .invert = winvert, \
	.event = wevent, .event_flags = wflags}
#define SND_SOC_DAPM_CLOCK_SUPPLY(wname) \
{	.id = snd_soc_dapm_clock_supply, .name = wname, \
	.reg = SND_SOC_NOPM, .event = dapm_clock_event, \
	.event_flags = SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD }

/* generic widgets */
#define SND_SOC_DAPM_REG(wid, wname, wreg, wshift, wmask, won_val, woff_val) \
{	.id = wid, .name = wname, .kcontrol_news = NULL, .num_kcontrols = 0, \
	.reg = -((wreg) + 1), .shift = wshift, .mask = wmask, \
	.on_val = won_val, .off_val = woff_val, .event = dapm_reg_event, \
	.event_flags = SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD}
#define SND_SOC_DAPM_SUPPLY(wname, wreg, wshift, winvert, wevent, wflags) \
{	.id = snd_soc_dapm_supply, .name = wname, .reg = wreg,	\
	.shift = wshift, .invert = winvert, .event = wevent, \
	.event_flags = wflags}
#define SND_SOC_DAPM_REGULATOR_SUPPLY(wname, wdelay, wflags)	    \
{	.id = snd_soc_dapm_regulator_supply, .name = wname, \
	.reg = SND_SOC_NOPM, .shift = wdelay, .event = dapm_regulator_event, \
	.event_flags = SND_SOC_DAPM_PRE_PMU | SND_SOC_DAPM_POST_PMD, \
	.invert = wflags}


/* dapm kcontrol types */
#define SOC_DAPM_SINGLE(xname, reg, shift, max, invert) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.info = snd_soc_info_volsw, .index = SOC_DAPM_IO_VOLSW, \
	.get = snd_soc_dapm_get_volsw, .put = snd_soc_dapm_put_volsw, \
	.private_value =  SOC_SINGLE_VALUE(reg, shift, max, invert) }
#define SOC_DAPM_SINGLE_TLV(xname, reg, shift, max, invert, tlv_array) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.info = snd_soc_info_volsw, .index = SOC_DAPM_IO_VOLSW, \
	.access = SNDRV_CTL_ELEM_ACCESS_TLV_READ | SNDRV_CTL_ELEM_ACCESS_READWRITE,\
	.tlv.p = (tlv_array), \
	.get = snd_soc_dapm_get_volsw, .put = snd_soc_dapm_put_volsw, \
	.private_value =  SOC_SINGLE_VALUE(reg, shift, max, invert) }
#define SOC_DAPM_ENUM(xname, xenum) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.info = snd_soc_info_enum_double, \
	.get = snd_soc_dapm_get_enum_double, \
	.put = snd_soc_dapm_put_enum_double, \
	.index = SOC_DAPM_IO_ENUM_DOUBLE, \
	.private_value = (unsigned long)&xenum }
#define SOC_DAPM_ENUM_VIRT(xname, xenum)		    \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.info = snd_soc_info_enum_double, \
	.get = snd_soc_dapm_get_enum_virt, \
	.put = snd_soc_dapm_put_enum_virt, \
	.index = SOC_DAPM_IO_ENUM_VIRT, \
	.private_value = (unsigned long)&xenum }
#define SOC_DAPM_ENUM_EXT(xname, xenum, xget, xput) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.info = snd_soc_info_enum_double, \
	.index = SOC_DAPM_IO_ENUM_EXT, \
	.get = xget, \
	.put = xput, \
	.private_value = (unsigned long)&xenum }
#define SOC_DAPM_VALUE_ENUM(xname, xenum) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname, \
	.info = snd_soc_info_enum_double, \
	.get = snd_soc_dapm_get_value_enum_double, \
	.put = snd_soc_dapm_put_value_enum_double, \
	.index = SOC_DAPM_IO_ENUM_VALUE, \
	.private_value = (unsigned long)&xenum }
#define SOC_DAPM_PIN_SWITCH(xname) \
{	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = xname " Switch", \
	.info = snd_soc_dapm_info_pin_switch, \
	.get = snd_soc_dapm_get_pin_switch, \
	.put = snd_soc_dapm_put_pin_switch, \
	.index = SOC_DAPM_IO_PIN, \
	.private_value = (unsigned long)xname }
#endif // already defined in soc-dapm.h

#define SOC_DAPM_TYPE_VOLSW		64
#define SOC_DAPM_TYPE_ENUM_DOUBLE	65
#define SOC_DAPM_TYPE_ENUM_VIRT		66
#define SOC_DAPM_TYPE_ENUM_VALUE	67
#define SOC_DAPM_TYPE_PIN		68
#define SOC_DAPM_TYPE_ENUM_EXT		69

#define SOC_DAPM_IO_VOLSW \
	SOC_CONTROL_ID(SOC_DAPM_TYPE_VOLSW, \
		SOC_DAPM_TYPE_VOLSW, \
		SOC_DAPM_TYPE_VOLSW)
#define SOC_DAPM_IO_ENUM_DOUBLE \
	SOC_CONTROL_ID(SOC_DAPM_TYPE_ENUM_DOUBLE, \
		SOC_DAPM_TYPE_ENUM_DOUBLE, \
		SOC_CONTROL_TYPE_ENUM)
#define SOC_DAPM_IO_ENUM_VIRT \
	SOC_CONTROL_ID(SOC_DAPM_TYPE_ENUM_VIRT, \
		SOC_DAPM_TYPE_ENUM_VIRT, \
		SOC_CONTROL_TYPE_ENUM)
#define SOC_DAPM_IO_ENUM_VALUE \
	SOC_CONTROL_ID(SOC_DAPM_TYPE_ENUM_VALUE, \
		SOC_DAPM_TYPE_ENUM_VALUE, \
		SOC_CONTROL_TYPE_ENUM)
#define SOC_DAPM_IO_PIN \
	SOC_CONTROL_ID(SOC_DAPM_TYPE_PIN, \
		SOC_DAPM_TYPE_PIN, \
		SOC_DAPM_TYPE_PIN)
#define SOC_DAPM_IO_ENUM_EXT \
	SOC_CONTROL_ID(SOC_CONTROL_TYPE_EXT, \
		SOC_CONTROL_TYPE_EXT, \
		SOC_CONTROL_TYPE_ENUM)

#if 0	// already defined in soc-dapm.h
/* dapm widget types */
enum snd_soc_dapm_type {
	snd_soc_dapm_input = 0,		/* input pin */
	snd_soc_dapm_output,		/* output pin */
	snd_soc_dapm_mux,			/* selects 1 analog signal from many inputs */
	snd_soc_dapm_virt_mux,			/* virtual version of snd_soc_dapm_mux */
	snd_soc_dapm_value_mux,			/* selects 1 analog signal from many inputs */
	snd_soc_dapm_mixer,			/* mixes several analog signals together */
	snd_soc_dapm_mixer_named_ctl,		/* mixer with named controls */
	snd_soc_dapm_pga,			/* programmable gain/attenuation (volume) */
	snd_soc_dapm_out_drv,			/* output driver */
	snd_soc_dapm_adc,			/* analog to digital converter */
	snd_soc_dapm_dac,			/* digital to analog converter */
	snd_soc_dapm_micbias,		/* microphone bias (power) */
	snd_soc_dapm_mic,			/* microphone */
	snd_soc_dapm_hp,			/* headphones */
	snd_soc_dapm_spk,			/* speaker */
	snd_soc_dapm_line,			/* line input/output */
	snd_soc_dapm_switch,		/* analog switch */
	snd_soc_dapm_vmid,			/* codec bias/vmid - to minimise pops */
	snd_soc_dapm_pre,			/* machine specific pre widget - exec first */
	snd_soc_dapm_post,			/* machine specific post widget - exec last */
	snd_soc_dapm_supply,		/* power/clock supply */
	snd_soc_dapm_regulator_supply,	/* external regulator */
	snd_soc_dapm_clock_supply,	/* external clock */
	snd_soc_dapm_aif_in,		/* audio interface input */
	snd_soc_dapm_aif_out,		/* audio interface output */
	snd_soc_dapm_siggen,		/* signal generator */
	snd_soc_dapm_dai,		/* link to DAI structure */
	snd_soc_dapm_dai_link,		/* link between two DAI structures */
};
#endif	// already defined in soc-dapm.h

/* Header magic number and string sizes */
#define SND_SOC_FW_MAGIC	0x41536F43 /* ASoC */

/* string sizes */
#define SND_SOC_FW_TEXT_SIZE	32
#define SND_SOC_FW_NUM_TEXTS	16

/* ABI version */
#define SND_SOC_FW_ABI_VERSION		0x1

/*
 * File and Block header data types.
 * Add new generic and vendor types to end of list.
 * Generic types are handled by the core whilst vendors types are passed
 * to the component drivers for handling.
 */
#define SND_SOC_FW_MIXER		1
#define SND_SOC_FW_DAPM_GRAPH		2
#define SND_SOC_FW_DAPM_WIDGET		3
#define SND_SOC_FW_DAI_LINK		4
#define SND_SOC_FW_COEFF		5

#define SND_SOC_FW_VENDOR_FW		1000
#define SND_SOC_FW_VENDOR_CONFIG	1001
#define SND_SOC_FW_VENDOR_COEFF	1002
#define SND_SOC_FW_VENDOR_CODEC	1003

/*
 * File and Block Header
 */
struct snd_soc_fw_hdr {
	__le32 magic;
	__le32 abi;		/* ABI version */
	__le32 type;
	__le32 vendor_type;	/* optional vendor specific type info */
	__le32 version;		/* optional vendor specific version details */
	__le32 size;		/* data bytes, excluding this header */
} __attribute__((packed));


struct snd_soc_fw_ctl_tlv {
	__le32 numid;	/* control element numeric identification */
	__le32 length;	/* in bytes aligned to 4 */
	/* tlv data starts here */
} __attribute__((packed));

struct snd_soc_fw_control_hdr {
	char name[SND_SOC_FW_TEXT_SIZE];
	__le32 index;
	__le32 access;
	__le32 tlv_size;
} __attribute__((packed));

/*
 * Mixer kcontrol.
 */
struct snd_soc_fw_mixer_control {
	struct snd_soc_fw_control_hdr hdr;
	__s32 min;
	__s32 max;
	__s32 platform_max;
	__le32 reg;
	__le32 rreg;
	__le32 shift;
	__le32 rshift;
	__le32 invert;
} __attribute__((packed));

/*
 * Enumerated kcontrol
 */
struct snd_soc_fw_enum_control {
	struct snd_soc_fw_control_hdr hdr;
	__le32 reg;
	__le32 reg2;
	__le32 shift_l;
	__le32 shift_r;
	__le32 max;
	__le32 mask;
	__le32 count;
	char texts[SND_SOC_FW_NUM_TEXTS][SND_SOC_FW_TEXT_SIZE];
	__le32 values[SND_SOC_FW_NUM_TEXTS * SND_SOC_FW_TEXT_SIZE / 4];
} __attribute__((packed));

/*
 * kcontrol Header
 */
struct snd_soc_fw_kcontrol {
	__le32 count; /* in kcontrols (based on type) */
	/* kcontrols here */
} __attribute__((packed));

/*
 * DAPM Graph Element
 */
struct snd_soc_fw_dapm_graph_elem {
	char sink[SND_SOC_FW_TEXT_SIZE];
	char control[SND_SOC_FW_TEXT_SIZE];
	char source[SND_SOC_FW_TEXT_SIZE];
} __attribute__((packed));


/*
 * DAPM Widget.
 */
struct snd_soc_fw_dapm_widget {
	__le32 id;		/* snd_soc_dapm_type */
	char name[SND_SOC_FW_TEXT_SIZE];
	char sname[SND_SOC_FW_TEXT_SIZE];

	__s32 reg;		/* negative reg = no direct dapm */
	__le32 shift;		/* bits to shift */
	__le32 mask;		/* non-shifted mask */
	__u8 invert;		/* invert the power bit */
	__u8 ignore_suspend;	/* kept enabled over suspend */
	__u8 padding[2];

	/* kcontrols that relate to this widget */
	struct snd_soc_fw_kcontrol kcontrol;
	/* controls follow here */
} __attribute__((packed));

/*
 * DAPM Graph and Pins.
 */
struct snd_soc_fw_dapm_elems {
	__le32 count; /* in elements */
	/* elements here */
} __attribute__((packed));

/*
 * Coeffcient File Data.
 */
struct snd_soc_file_coeff_data {
	__le32 count; /* in elems */
	__le32 size;	/* total data size */
	__le32 id; /* associated mixer ID */
	/* data here */
} __attribute__((packed));

#endif	// __LINUX_UAPI_SND_ASOC_SOCFW_H

// we should #include <sound/soc.h> for
// struct soc_mixer_control
// struct soc_enum
// but this is NOT uapi!
// hence we add a copy for the moment
// beware: this must be synced to the kernel (but is quite unlikely to change often)

#ifndef __LINUX_SND_SOC_H
#define __LINUX_SND_SOC_H

/* mixer control */
struct soc_mixer_control {
	int min, max, platform_max;
	int reg, rreg;
	unsigned int shift, rshift;
	unsigned int sign_bit;
	unsigned int invert:1;
	unsigned int autodisable:1;
#ifdef CONFIG_SND_SOC_TOPOLOGY
	struct snd_soc_dobj dobj;
#endif
};

/* enumerated kcontrol */
struct soc_enum {
	int reg;
	unsigned char shift_l;
	unsigned char shift_r;
	unsigned int items;
	unsigned int mask;
	const char * const *texts;
	const unsigned int *values;
	unsigned int autodisable:1;
#ifdef CONFIG_SND_SOC_TOPOLOGY
	struct snd_soc_dobj dobj;
#endif
};

#endif // __LINUX_SND_SOC_H

END

# src/lib.c verwendet viele undefined wie z.B. SND_SOC_FW_TEXT_SIZE, SOC_CONTROL_ID, SOC_CONTROL_GET_ID_GET, SOC_CONTROL_TYPE_VOLSW_SX...
# war das früher im Kernel definiert?
# angeblich ja (applied): https://alsa-devel.alsa-project.narkive.com/3d94ItQx/patch-1-4-asoc-firmware-add-support-for-fw-based-kcontrols
# https://mailman.alsa-project.org/pipermail/alsa-devel/2012-November/057156.html

echo +++ build the Makefiles
LC_ALL=C ./autogen.sh || exit

echo +++ configure
./configure --with-linux-dir=$LINUX --enable-omap4 || exit

echo +++ patch include file search paths and some compiler options
# typical kernel gcc call: arm-linux-gnueabihf-gcc -Wp,-MMD,arch/arm/kernel/.perf_regs.o.d  -nostdinc -I./arch/arm/include -I./arch/arm/include/generated  -I./include -I./arch/arm/include/uapi -I./arch/arm/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/compiler-version.h -include ./include/linux/kconfig.h -include ./include/linux/compiler_types.h -D__KERNEL__ -mlittle-endian -Wall -Wundef -Werror=strict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE -Werror=implicit-function-declaration -Werror=implicit-int -Werror=return-type -Wno-format-security -std=gnu89 -fno-dwarf2-cfi-asm -fno-ipa-sra -mabi=aapcs-linux -mfpu=vfp -funwind-tables -mtp=cp15 -marm -Wa,-mno-warn-deprecated -D__LINUX_ARM_ARCH__=7 -march=armv7-a -msoft-float -Uarm -fno-delete-null-pointer-checks -Wno-frame-address -Os --param=allow-store-data-races=0 -Wframe-larger-than=1024 -fstack-protector-strong -Wno-main -Wno-unused-but-set-variable -Wno-unused-const-variable -fomit-frame-pointer -fno-inline-functions-called-once -Wdeclaration-after-statement -Wvla -Wno-pointer-sign -Wno-array-bounds -Wno-maybe-uninitialized -fno-strict-overflow -fno-stack-check -fconserve-stack -Werror=date-time -Werror=incompatible-pointer-types -Werror=designated-init    -DKBUILD_MODFILE='"arch/arm/kernel/perf_regs"' -DKBUILD_BASENAME='"perf_regs"' -DKBUILD_MODNAME='"perf_regs"' -D__KBUILD_MODNAME=kmod_perf_regs -c -o arch/arm/kernel/perf_regs.o arch/arm/kernel/perf_regs.c
# include linux headers
#INCLUDES+=" -I $LETUX/arch/arm/include"
#INCLUDES+=" -I $LETUX/arch/arm/include/generated"
#INCLUDES+=" -I $LETUX/include"
#INCLUDES+=" -I $LETUX/arch/arm/include/uapi"
#INCLUDES+=" -I $LETUX/arch/arm/include/generated/uapi"
#INCLUDES+=" -I $LETUX/include/uapi"
#INCLUDES+=" -I $LETUX/include/generated/uapi"
INCLUDES+=" -D__KERNEL__"
# -mlittle-endian -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE
# -mabi=aapcs-linux -mfpu=vfp -funwind-tables -mtp=cp15 -marm
INCLUDES+=" -D__LINUX_ARM_ARCH__=7"
#INCLUDES+=" -D__LINUX_COMPILER_ATTRIBUTES_H"
#INCLUDES+=" -D_SYS_CDEFS_H"
INCLUDES+=" -D_SYS_STAT_H"
#INCLUDES+=" -D_FCNTL_H"
# -march=armv7-a -msoft-float -Uarm -fno-delete-null-pointer-checks -Os
# INCLUDES+=" -D__ASSEMBLY__"
# INCLUDES+=" -DARCH=arm"
# the following is the result of experimentation
#INCLUDES+=" -I ../include"
#INCLUDES+=" -I ."
#INCLUDES+=" -I $PWD/include/$VERSION"
#INCLUDES+=" -I $PWD/tasks"
#INCLUDES+=" -I $PWD/../audio-test/tools/abe/abe_hal"	# for abe_api.h
# try fine control over system headers which may conflict with linux kernel tree headers
if false
then
INCLUDES+=" -nostdinc"
INCLUDES+=" -I /usr/lib/gcc/arm-linux-gnueabihf/6/include"
INCLUDES+=" -I /usr/local/include"
INCLUDES+=" -I /usr/lib/gcc/arm-linux-gnueabihf/6/include-fixed"
INCLUDES+=" -I /usr/include/arm-linux-gnueabihf"
INCLUDES+=" -I /usr/include"
fi
# include some relevant kernel files
#INCLUDES+=" -include $LETUX/include/linux/compiler-version.h"
#INCLUDES+=" -include $LETUX/include/linux/kconfig.h"
#INCLUDES+=" -include $LETUX/include/linux/compiler_types.h"
#INCLUDES+=" -include $LETUX/include/linux/types.h"
INCLUDES+=" -I $LINUX/include"
# include some headers usually not exported from source tree
#INCLUDES+=" -include $LETUX/include/linux/compiler_types.h"
#INCLUDES+=" -include $LETUX/include/linux/compiler.h"
### FIXME: how can we skip include <linux/nospec.h> in include/sound/control.h
### by creating an empty linux/nospec.h in the search path
#INCLUDES+=" -D_LINUX_NOSPEC_H"
INCLUDES+=" -D__user=''"
INCLUDES+=" -D_LINUX_WAIT_H"
# define some minimalistic private headers so that we do not include the full kernel tree
# if we would include the full kernel tree we will get conficts about dev_t and other types
mkdir -p src/linux src/sound	# there is -I ../src
### sound/control.h and others needs list_head
(
echo "#ifndef _LINUX_LIST_H"
echo "#define _LINUX_LIST_H"
echo "struct list_head { struct list_head *next, *prev; };"
echo "#endif"
) >src/linux/list.h
(
echo "#ifndef _LINUX_NOSPEC_H"
echo "#define _LINUX_NOSPEC_H"
echo "#include <linux/list.h>"
echo "typedef int wait_queue_head_t;"
echo "typedef int spinlock_t;"
echo "typedef int bool;"
# assume we are on a 32 bit machine like omap4/5
echo "#define array_index_nospec(A, B) (0*A*B)"
echo "#define IS_MODULE(A) (0)"
echo "struct snd_pcm_substream { };"
echo "struct dentry { };"
echo "#include \"socfw.h\""
echo "#endif"
) > src/linux/nospec.h	# do not try to include the nested file from full kernel tree
ln -sf "$LETUX/include/sound/control.h" src/sound
ln -sf "$LETUX/include/sound/soc-topology.h" src/sound
ln -sf "$LETUX/include/sound/soc-dapm.h" src/sound
ln -sf "$LETUX/include/sound/soc.h" src/sound
# INCLUDES+=" -include $LETUX/include/linux/nospec.h"
# INCLUDES+=" -include $LETUX/include/sound/soc-dapm.h"
# INCLUDES+=" -include $LETUX/include/sound/control.h"

# we misuse this line for all the CFLAGS...
sed -i.bak \
	-e "s|DEFAULT_INCLUDES =.*|DEFAULT_INCLUDES =$INCLUDES|g" \
	-e "s|-D __EXPORTED_HEADERS__||g" \
	src/Makefile

### patch the plugins and coeffs sources and Makefile

echo +++ make and install
make || exit 1
make install || exit 1

echo "+++ finally generate firmware binary"

scripts/abegen.sh || exit 1
echo "+++ install as omap_aess-adfw.bin"
cp omap4_abe_new /lib/firmware/omap_aess-adfw.bin || exit 1
echo "+++ success ++"
ls -l /lib/firmware/omap_aess-adfw.bin
) || exit
