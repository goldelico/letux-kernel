#!/bin/bash
#
# build AESS firmware on destination device (e.g. PandaBoard, OMAP5EVM, Pyra, ...)
# cross-compile may need different approach
# tested on Debian 9.13
#
# Firware comes from https://github.com/omap-audio
#
# Caveats:
# - we have no idea where to find audio-test.git
# - the tests subdirectory assumes headers and constants (e.g. OMAP_ABE_DMEM)
# - these are nowhere available on an upstream Linux kernel
# - some location is e.g. https://android.googlesource.com/kernel/msm/+/android-msm-mako-3.4-jb-mr1.1/sound/soc/omap/abe/abe_mem.h
# - so we mix the letux kernel tree (headers) with this stuff
#

THIS="$PWD"
BRANCH=letux-5.16-rc8
VERSION=009590

#
# preparation of build host
#

echo +++ make sure we have the required build tools
apt-get install build-essential bison flex bc libssl-dev git autogen automake libtool || exit 1

echo +++ create and go to $PWD/aess
mkdir -p aess && cd aess || exit 1

#
# getting source trees
#

function gitfetch { # $1 = repo, $2 = subdir
	if ! [ -d $2 ]
	then
		rm -rf $2.tmp
		git clone --depth 1 -b $BRANCH $1 $2.tmp && mv $2.tmp $2 || return
	fi
}

echo +++ fetch the "(complete)" letux kernel source tree with minimal effort
gitfetch "--depth 1 -b $BRANCH https://github.com/goldelico/letux-kernel.git" letux-kernel.git || exit 1

LETUX="$PWD/letux-kernel.git"	# full source tree
LINUX="$PWD/linux-headers"	# installed headers

echo +++ fetch the omap4/5 firmware into a subdirectory
gitfetch "-b master https://github.com/omap-audio/abefw" abefw.git || exit 1

echo +++ fetch the audio-test code
gitfetch "-b master https://github.com/omap-audio/audio-test.git" audio-test.git

echo +++ fetch the asoc-fw tools
gitfetch "-b master https://github.com/omap-audio/asoc-fw.git" asoc-fw.git

#
# build kernel headers
#

echo +++ configure kernel and build generated headers
[ -f $LETUX/include/generated/uapi/linux/version.h ] || (cd $LETUX && make ARCH=arm letux_lpae_defconfig modules_prepare headers_install INSTALL_HDR_PATH=$LINUX && ln -sf asm-generic include/asm) || exit 1

(
cd abefw.git || exit

echo +++ build the Makefiles
LC_ALL=C ./autogen.sh || exit 1

echo +++ configure
# the configure option --with-hal-dir does not exist "(contrary to README)"
# ./configure --with-linux-dir=$LETUX --with-hal-dir=$PWD/hal || exit 1
./configure --with-linux-dir=$LETUX || exit 1

echo +++ make and install
make || exit 1
make install || exit 1

echo +++ generate data files
scripts/abe-tool.sh $VERSION || exit 1
) || exit

(
cd asoc-fw.git || exit

echo +++ patch lib.c and socfw.h so that we can use modern Linux headers
fgrep -q _SYS_TYPES_H src/lib.c || sed -i.bak -e "s/#include <stdlib.h>/#define _SYS_TYPES_H 1\n#include <stdlib.h>/" src/lib.c
fgrep -q '#undef' src/lib.c || sed -i.bak -e "s/#include <stdlib.h>/typedef int int32_t;\n#include <stdlib.h>\n#undef __always_inline\n#undef __extern_always_inline\n#undef __attribute_const__/" src/lib.c
fgrep -q '#include <sound/soc-dapm.h>' src/socfw.h || sed -i.bak -e "s|int8_t s8;|int8_t s8;\n\n#include <sound/soc-dapm.h>|" src/socfw.h
fgrep -q 'disable redefinition of these structs' src/socfw.h || sed -i.bak -e "s|/\* mixer control \*/|/* mixer control */\n\n#if 0 /* disable redefinition of these structs */|" -e "s|#endif|#endif\n#endif|" src/socfw.h
fgrep -q '// ec.max = ' src/lib.c || sed -i.bak -e "s|ec.max = menum->max;|// ec.max = menum->max; broken but not needed|" src/lib.c
fgrep -q '// ec.reg2 = ' src/lib.c || sed -i.bak -e "s|ec.reg2 = menum->reg2;|// ec.reg2 = menum->reg2; broken but not needed|" src/lib.c
fgrep -q '// widget.invert = ' src/lib.c || sed -i.bak -e "s|widget.invert = |// widget.invert = widgets[i].invert; broken but not needed|" src/lib.c

echo +++ build the Makefiles
LC_ALL=C ./autogen.sh || exit

echo +++ configure
./configure --with-linux-dir=$LINUX --enable-omap4 || exit

echo +++ patch include file search paths and some compiler options
# typical kernel gcc call: arm-linux-gnueabihf-gcc -Wp,-MMD,arch/arm/kernel/.perf_regs.o.d  -nostdinc -I./arch/arm/include -I./arch/arm/include/generated  -I./include -I./arch/arm/include/uapi -I./arch/arm/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/compiler-version.h -include ./include/linux/kconfig.h -include ./include/linux/compiler_types.h -D__KERNEL__ -mlittle-endian -Wall -Wundef -Werror=strict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -fshort-wchar -fno-PIE -Werror=implicit-function-declaration -Werror=implicit-int -Werror=return-type -Wno-format-security -std=gnu89 -fno-dwarf2-cfi-asm -fno-ipa-sra -mabi=aapcs-linux -mfpu=vfp -funwind-tables -mtp=cp15 -marm -Wa,-mno-warn-deprecated -D__LINUX_ARM_ARCH__=7 -march=armv7-a -msoft-float -Uarm -fno-delete-null-pointer-checks -Wno-frame-address -Os --param=allow-store-data-races=0 -Wframe-larger-than=1024 -fstack-protector-strong -Wno-main -Wno-unused-but-set-variable -Wno-unused-const-variable -fomit-frame-pointer -fno-inline-functions-called-once -Wdeclaration-after-statement -Wvla -Wno-pointer-sign -Wno-array-bounds -Wno-maybe-uninitialized -fno-strict-overflow -fno-stack-check -fconserve-stack -Werror=date-time -Werror=incompatible-pointer-types -Werror=designated-init    -DKBUILD_MODFILE='"arch/arm/kernel/perf_regs"' -DKBUILD_BASENAME='"perf_regs"' -DKBUILD_MODNAME='"perf_regs"' -D__KBUILD_MODNAME=kmod_perf_regs -c -o arch/arm/kernel/perf_regs.o arch/arm/kernel/perf_regs.c
# include linux headers
INCLUDES+=" -D__KERNEL__"
INCLUDES+=" -D__LINUX_ARM_ARCH__=7"
INCLUDES+=" -D_SYS_STAT_H"
INCLUDES+=" -I $LINUX/include"
INCLUDES+=" -D__user=''"
INCLUDES+=" -D_LINUX_WAIT_H"

# define some minimalistic private headers so that we do not include the full kernel tree
# if we would include the full kernel tree we will get conficts about dev_t and other types
mkdir -p src/linux src/sound	# there is -I ../src
### sound/control.h and others needs list_head
(
echo "#ifndef _LINUX_LIST_H"
echo "#define _LINUX_LIST_H"
echo "struct list_head { struct list_head *next, *prev; };"
echo "#endif"
) >src/linux/list.h
(
echo "#ifndef _LINUX_NOSPEC_H"
echo "#define _LINUX_NOSPEC_H"
echo "#include <linux/list.h>"
echo "typedef int wait_queue_head_t;"
echo "typedef int spinlock_t;"
echo "typedef int bool;"
# assume we are on a 32 bit machine like omap4/5
echo "#define array_index_nospec(A, B) (0*A*B)"
echo "#define IS_MODULE(A) (0)"
echo "struct snd_pcm_substream { };"
echo "struct dentry { };"
echo "#include \"socfw.h\""
echo "#endif"
) > src/linux/nospec.h	# do not try to include the nested file from full kernel tree
ln -sf "$LETUX/include/sound/control.h" src/sound
ln -sf "$LETUX/include/sound/soc-topology.h" src/sound
ln -sf "$LETUX/include/sound/soc-dapm.h" src/sound
ln -sf "$LETUX/include/sound/soc.h" src/sound
# INCLUDES+=" -include $LETUX/include/linux/nospec.h"
# INCLUDES+=" -include $LETUX/include/sound/soc-dapm.h"
# INCLUDES+=" -include $LETUX/include/sound/control.h"

echo +++ make and install
make || exit 1
make install || exit 1

echo "+++ finally generate firmware binary"

scripts/abegen.sh || exit 1
echo "+++ install as omap_aess-adfw.bin"
cp omap4_abe_new /lib/firmware/omap_aess-adfw.bin || exit 1
echo "+++ success ++"
ls -l /lib/firmware/omap_aess-adfw.bin
) || exit
