#
# GTA04 hardware test script
# (c) Golden Delicious Computers GmbH&Co. KG, 2011-2016
# licenced under GPL
#
# usage: hw-test [-t] [testname]
#

TESTER_VERSION="6.0"
TESTER_RECOMMENDED_KERNEL="4.7"
TESTER_DATE="10 Aug 2016"

MODEL=$(cat /proc/device-tree/model 2>/dev/null)

function findregulator {
for regulator in /sys/class/regulator/regulator.*
do
	if [ "$(cat $regulator/name 2>/dev/null)" = "$1" ]
		then echo $regulator
		break
	fi
done
}

function findiio {
for iiodev in /sys/bus/iio/devices/iio:device*
do
	if [ "$(cat $iiodev/name 2>/dev/null)" = "$1" ]
		then echo $iiodev
		break
	fi
done
}

function findhwmon {
for dev in /sys/class/hwmon/hwmon*/name /sys/class/hwmon/hwmon*/device/name
do
	if [ "$(cat $dev 2>/dev/null)" = "$1" ]
		then echo $(dirname $dev)/
		break
	fi
done
}

function findthermal {
for dev in /sys/class/thermal/thermal_zone*
	do
	if [ "$(cat $dev/type 2>/dev/null)" = "$1" ]
		then echo $dev
		break
	fi
done
}

ANYNOK=false

function report { # $1: result $2: test-name $3: values $4: message
# echo "$2-$MODEL"
	if [ "$1" == 0 ]
	then # successful
		SEQUENCE=$(expr $SEQUENCE + 1)
		echo $SEQUENCE $2 ok $3 $4
		return 0;
	else # not successful - outcome depends on device/variant
# this can be seen as a "database" which knows about hardware variations
		case "$2-$MODEL" in
			  test_lis302-*GTA04A3* \
			| test_bno055-*GTA04A5* \
			| test_bno055-*Pyra* \
			| test_tca6507_*-*Pyra* \
			| test_crtouch-*Pyra* \
			| test_bmg160-*Pyra* \
			| test_bmc150*-*Pyra* \
			| test_bmg160-*GTA04A5* \
			| test_bmc150*-*GTA04A5* \
			| test_eeprom_*-*Pyra* \
			| test_camera-*GTA04* \
			) # optional feature
				SEQUENCE=$(expr $SEQUENCE + 1)
				echo $SEQUENCE $2 nfnd $3 $4
				return 1;
				;;
			  test_lis302-* \
			| test_bno055-* \
			| test_bmc150*-*GTA04[Ab2-4]* \
			| test_bmg160*-*GTA04[Ab2-4]* \
			| test_hmc5883-*GTA04A5* \
			| test_itg3200-*GTA04A5* \
			| test_tca6507_[0234]-*GTA04* \
			| test_is31fl31xx_*-*GTA04* \
			| test_crtouch-*GTA04* \
			| test_nub*-*GTA04* \
			| test_keyboard-*GTA04* \
			| test_eeprom_[0234]-*GTA04* \
			| test_eeprom_1-*GTA04A5* \
			| test_wwan_usb_gemalto-*GTA04* \
			| test_wwan_hwmon_off-*GTA04* \
			| test_power_twl4030_batt_hdq-*GTA04b* \
			| test_hmc5883-*Pyra* \
			| test_itg3200-*Pyra* \
			| test_camera-*Pyra* \
			| test_si47xx-*Pyra* \
			| test_tps61050-*Pyra* \
			| test_wwan_usb_option-*Pyra* \
			| test_leds_on-*Pyra* \
			| test_rootfs-*Pyra* \
			| test_uboot-*Pyra* \
			| test_memory_nand-*Pyra* \
			| test_cpu_id-*Pyra* \
			| test_cpu_mpurate-*Pyra* \
			| test_power_twl4030*-*Pyra* \
			) # known to be never available on these models
				: no message about failure
				return 0
				;;
			* ) # function is missing on device
				SEQUENCE=$(expr $SEQUENCE + 1)
				echo $SEQUENCE $2 nok $3 $4
				ANYNOK=true
				return 1
				;;
		esac
	fi
}

function test_false {
	report 1 ${FUNCNAME} "always fails"
}

function test_true {
	report 0 ${FUNCNAME} "always succeeds"
}

function test_start {
	report $? ${FUNCNAME} "$(date)"
}

function test_version {
	report 0 ${FUNCNAME} "$TESTER_VERSION"
}

function test_kernel {
	report 0 ${FUNCNAME} "$(uname -rv) - recommended minimum: $TESTER_RECOMMENDED_KERNEL"
}

function test_rootfs {
	if fgrep -q 'root=/dev/mmcblk' /proc/cmdline
	then report 0 ${FUNCNAME} "SD"
	else report 0 ${FUNCNAME} "NAND/eMMC"
	fi
}

function test_device_tree {
	if [ -r /proc/device-tree ]
	then report 0 ${FUNCNAME} "with DT"
	else report 0 ${FUNCNAME} "without DT"
	fi
}

function test_model {
	report 0 ${FUNCNAME} "$MODEL" "Device-Tree-Model"
}

function test_startup {
	test_start
	test_version
	test_kernel
	test_rootfs
	test_device_tree
	test_model
}

function test_leds_on {
	# if GTA04
	( echo 31 >/sys/class/leds/gta04:red:power/brightness &&
	echo 255 >/sys/class/leds/gta04:green:power/brightness &&
	echo 31 >/sys/class/leds/gta04:red:aux/brightness &&
	echo 255 >/sys/class/leds/gta04:green:aux/brightness ) 2>/dev/null
	report $? ${FUNCNAME} "" "enable LEDs"
}

function test_barometer {
	# BMP085/180/280
	BARO=$(findiio bmp085)
	[ "$BARO" ] || BARO=$(findiio bmp180)
	[ "$BARO" ] || BARO=$(findiio bmp280)
	[ "$BARO" ] || BARO=$(findiio bme280)
	PRESSURE=$(cat $BARO/in_pressure_input 2>/dev/null)
	CENTIGRADE=$(cat $BARO/in_temp_input 2>/dev/null)
	PRESSURE=$(echo | awk "{ printf \"%.0f\", 10.0 * ${PRESSURE:=0} }")
	CENTIGRADE=$(echo | awk "{ printf \"%.0f\", ${CENTIGRADE:=0} / 1000 }")
	[ "${PRESSURE:=-1}" -ge 850 -a "$PRESSURE" -le 1150 -a "${CENTIGRADE:=-1}" -ge 20 -a "$CENTIGRADE" -le 60 ]
	report $? ${FUNCNAME} "${PRESSURE} mBar, ${CENTIGRADE} 째C" "Barometer values"
}

function test_itg3200 {
	GYRO=$(findiio itg3200)
	[ "$GYRO" ] && echo 10 >$GYRO/sampling_frequency 2>/dev/null
	sleep 0.1
	X=$(cat $GYRO/in_anglvel_x_raw 2>/dev/null)
	Y=$(cat $GYRO/in_anglvel_y_raw 2>/dev/null)
	Z=$(cat $GYRO/in_anglvel_z_raw 2>/dev/null)
	CENTIGRADE=$(echo | awk "{ printf \"%.0f\", ( $(cat $GYRO/in_temp_raw 2>/dev/null) + $(cat $GYRO/in_temp_offset 2>/dev/null) ) * $(cat $GYRO/in_temp_scale 2>/dev/null) * 10 }" 2>/dev/null)
	G=$(expr ${X:=0} '*' ${X} + ${Y:=0} '*' ${Y} + ${Z:=0} '*' ${Z})
	GMAX=$(expr 3 '*' 200 '*' 200)
	CENTIGRADE=$(expr "${CENTIGRADE:=0}" / 10)
	[ "$G" -le "$GMAX" -a "$G" -ge 0 -a "$CENTIGRADE" -ge 10 -a "$CENTIGRADE" -le 60 ]
	report $? ${FUNCNAME} "$X, $Y, $Z, ${CENTIGRADE} 째C" "Gyroscope values"
}

function test_bmg160 {
	GYRO=$(findiio bmg160)
	[ "$GYRO" ] && echo 100 >$GYRO/in_anglvel_sampling_frequency 2>/dev/null
	sleep 0.1
	X=$(cat $GYRO/in_anglvel_x_raw 2>/dev/null)
	Y=$(cat $GYRO/in_anglvel_y_raw 2>/dev/null)
	Z=$(cat $GYRO/in_anglvel_z_raw 2>/dev/null)
	CENTIGRADE=$(echo | awk "{ printf \"%.0f\", ( $(cat $GYRO/in_temp_raw 2>/dev/null) + $(cat $GYRO/in_temp_offset 2>/dev/null) ) * $(cat $GYRO/in_temp_scale 2>/dev/null) * 10 }" 2>/dev/null)
	G=$(expr ${X:=0} '*' ${X} + ${Y:=0} '*' ${Y} + ${Z:=0} '*' ${Z})
	GMAX=$(expr 3 '*' 200 '*' 200)
	CENTIGRADE=$(expr "${CENTIGRADE:=0}" / 10)
	[ "$G" -le "$GMAX" -a "$G" -ge 0 -a "$CENTIGRADE" -ge 10 -a "$CENTIGRADE" -le 60 ]
	report $? ${FUNCNAME} "$X, $Y, $Z, ${CENTIGRADE} 째C" "Gyroscope values"
}

function test_gyroscope {
	test_itg3200
	test_bmg160
}

function test_bmc150_accel {
	[ -r /dev/input/accel ] && read -t 1 X Y Z < <(echo $(evtest /dev/input/accel | head -19 | fgrep Value | sed 's/Value//g'))
	G=$(expr ${X:=0} '*' ${X} + ${Y:=0} '*' ${Y} + ${Z:=0} '*' ${Z})
	GMIN=$(expr 200 '*' 200)
	GMAX=$(expr 300 '*' 300)
	[ "$G" -le "$GMAX" -a "$G" -ge "$GMIN" ]
	report $? ${FUNCNAME} "$X, $Y, $Z" "Accelerometer values"
}

function test_lis302 {
	false
	report $? ${FUNCNAME} "$X, $Y, $Z" "Accelerometer values"
}

function test_accelerometer {
	test_bmc150_accel
	test_lis302
}

function test_hmc5883 {
	COMPASS=$(findiio hmc5883l)
	[ "$COMPASS" ] && echo 15 >$COMPASS/in_magn_sampling_frequency 2>/dev/null
	sleep 1
	X=$(cat $COMPASS/in_magn_x_raw 2>/dev/null)
	Y=$(cat $COMPASS/in_magn_y_raw 2>/dev/null)
	Z=$(cat $COMPASS/in_magn_z_raw 2>/dev/null)
	[ "$X$Y$Z" ]
	report $? ${FUNCNAME} "$X, $Y, $Z" "Compass values"
}

function test_bmc150_compass {
	COMPASS=$(findiio bmc150_magn)
	[ "$COMPASS" ] && echo 15 >$COMPASS/in_magn_sampling_frequency 2>/dev/null
	sleep 1
	X=$(cat $COMPASS/in_magn_x_raw 2>/dev/null)
	Y=$(cat $COMPASS/in_magn_y_raw 2>/dev/null)
	Z=$(cat $COMPASS/in_magn_z_raw 2>/dev/null)
	[ "$X$Y$Z" ]
	report $? ${FUNCNAME} "$X, $Y, $Z" "Compass values"
}

function test_compass {
	test_hmc5883
	test_bmc150_compass
}

function test_bno055 {
	COMPASS=$(findiio bno055)
	sleep 1
	XA=$(cat $COMPASS/in_accel_x_raw 2>/dev/null)
	YA=$(cat $COMPASS/in_accel_y_raw 2>/dev/null)
	ZA=$(cat $COMPASS/in_accel_z_raw 2>/dev/null)
	XG=$(cat $COMPASS/in_anglvel_x_raw 2>/dev/null)
	YG=$(cat $COMPASS/in_anglvel_y_raw 2>/dev/null)
	ZG=$(cat $COMPASS/in_anglvel_z_raw 2>/dev/null)
	TEMP=$(cat $COMPASS/in_temp_input 2>/dev/null)
	[ "$XA$YA$ZA$XG$YG$ZG$TEMP" ]
	report $? ${FUNCNAME} "$XA, $YA, $ZA - $XG, $YG, $ZG - $(expr "${TEMP:=0}" / 1000) 째C" "All values"
}

function test_sensors {
	test_barometer
	test_gyroscope
	test_accelerometer
	test_compass
	test_bno055
}

function test_tsc2007 {
	TSC=$(findiio tsc2007)
	read VAL < <(sed "s/,/ /g" $TSC/in_pressure6_raw 2>/dev/null)
	[ "$VAL" ]
	report $? ${FUNCNAME} "$VAL" "Touch screen pressure"
}

function test_crtouch {
	read VAL < <(sed "s/,/ /g" /sys/bus/i2c/devices/3-0049/values 2>/dev/null)
	[ "$VAL" ]
	report $? ${FUNCNAME} "$VAL" "Touch screen values"
}

function test_nub_left {
	[ "$(cat /sys/bus/i2c/drivers/as5013/1-0040/name 2>/dev/null)" = "as5013" ]
	report $? ${FUNCNAME} "" "Left Nub controller"
}

function test_nub_right {
	[ "$(cat /sys/bus/i2c/drivers/as5013/1-0041/name 2>/dev/null)" = "as5013" ]
	report $? ${FUNCNAME} "" "Right Nub controller"
}

function test_nubs {
	test_nub_left
	test_nub_right
}

function test_keyboard {
	[ -r "/dev/input/keyboard" ]
	report $? ${FUNCNAME} "" "Keyboard controller"
}

function test_inputs {
	test_tsc2007
	test_crtouch
	test_nubs
	test_keyboard
}

function test_camera {
	[ -r "/dev/v4l-subdev8" ]
	report $? ${FUNCNAME} "" "Camera device"
}

function test_tps61050 {
	[ -r "/sys/bus/i2c/devices/1-0033" ]
	report $? ${FUNCNAME} "" "Torch/Flash controller [no kernel driver]"
}

function test_eeprom { # $1: bus number
	[ -r "/sys/bus/i2c/devices/$1-0050/eeprom" ]
	report $? ${FUNCNAME}_$1 "$1-0050" "EEPROM on I2C$1"
}

function test_misc {
	test_tps61050
	test_eeprom 0	# GTA04 / Pyra-CPU
	test_eeprom 1	# n/a
	test_eeprom 2	# n/a
	test_eeprom 3	# Pyra-Display
	test_eeprom 4	 # Pyra-Mainboard
}

function test_tca6507 { # $1: bus number
	[ -r "/sys/bus/i2c/devices/$1-0045/leds" ]
	report $? ${FUNCNAME}_$1 "$1-0064" "TCA6507 LED controller on I2C$1"
}

function test_is31fl31xx { # $1: bus number
	[ -r "/sys/bus/i2c/devices/$1-0064/leds" ]
	report $? ${FUNCNAME}_$1 "$1-0064" "IS31FL31xx LED controller on I2C$1"
}

function test_leds {
	test_tca6507 1	# GTA04
	test_is31fl31xx 3	# Pyra-Display
	test_tca6507 3	# Pyra-Display
	test_is31fl31xx 4	# Pyra-Mainboard
}

function test_power_twl4030 {
	MADC=$(findiio "48070000.i2c:twl@48:madc")

	VOLT=$(cat ${MADC}/in_voltage12_input 2>/dev/null)
	[ "${VOLT:=-1}" -ge 3100 -a "$VOLT" -le 4300 ]
	report $? ${FUNCNAME}_batt_volt "${VOLT} mV" "main battery voltage"

	STATUS=$(cat /sys/class/power_supply/twl4030_usb/status 2>/dev/null)
	[ "$STATUS" ]
	report $? ${FUNCNAME}_batt_status "$STATUS" "USB charging status"

	TEMP=$(cat ${MADC}/in_temp1_input 2>/dev/null)
	[ "${TEMP:=-1}" -ge 20 -a "$TEMP" -le 55 ]
	report $? ${FUNCNAME}_batt_temp "${TEMP} 째C" "battery temperature [may not be real value if there is no NTC and if not charging]"

	TYPE=$(cat ${MADC}/in_voltage0_input 2>/dev/null)
	[ "$TYPE" ]
	report $? ${FUNCNAME}_batt_type "$TYPE" "battery identification"

	VOLT=$(cat ${MADC}/in_voltage9_input 2>/dev/null)
	[ "${VOLT:=-1}" -ge 200 -a "$VOLT" -le 3250 ]
	report $? ${FUNCNAME}_batt_backup "${VOLT} mV" "backup battery voltage"

	VOLT=$(cat /sys/class/power_supply/bq27000-battery/voltage_now 2>/dev/null)
	VOLT="$(expr "${VOLT:-0}" / 1000)"
	[ "${VOLT:=-1}" -ge 3100 -a "$VOLT" -le 4300 ]
	report $? ${FUNCNAME}_batt_hdq "${VOLT} mV" "main battery voltage [hdq]"
}

function test_power_generic {
	VOLT=$(cat /sys/class/power_supply/generic-adc-batt/voltage_now 2>/dev/null)
	[ "${VOLT:=-1}" -ge 3100 -a "$VOLT" -le 4300 ]
	report $? ${FUNCNAME}_batt_volt "${VOLT} mV" "generic adc battery voltage [broken driver]"
}

function test_power {
	test_power_generic
	test_power_twl4030
}

function test_memory {
	read VAL < <(fgrep MemTotal /proc/meminfo | sed "s/MemTotal.*:/ /g" 2>/dev/null)
	[ "$VAL" ]
	report $? ${FUNCNAME}_ram "$VAL" "Memory size (/proc/meminfo)"

	read MTD VAL OTHER < <(fgrep "File System" /proc/mtd)
	[ "$VAL" ] && VAL="$(expr $(printf "%d\n" 0x$VAL) / 1000) kB"
	report $? ${FUNCNAME}_nand "$VAL" "NAND size (/proc/mtd)"
}

function test_cpu_frequency {
	FREQ=$(cpufreq-info | fgrep 'current CPU frequency is ' | sed 's|current CPU frequency is \(.*\) (asserted by call to hardware).|\1|' 2>/dev/null)
	FREQ=$(echo $FREQ)	# make single line
	[ "$FREQ" ]
	report $? ${FUNCNAME} "$FREQ" "cpu clock frequency(ies)"
}

function test_cpu_temperature {
	CPU=$(findthermal cpu)
	[ "$CPU" ] || CPU=$(findthermal cpu_thermal)
	VAL=$(cat $CPU/temp 2>/dev/null)
	[ "$VAL" ]
	report $? ${FUNCNAME} "$(expr "${VAL:-0}" / 1000) 째C" "cpu temperature"
}

function test_cpu {
	read VAL < <(fw_printenv 'dieid#' 2>/dev/null | sed "s/dieid#=//g" 2>/dev/null)
	[ "$VAL" ]
	report $? ${FUNCNAME}_cpuid "$VAL" "Die-ID stored in u-boot environment"

	read VAL < <(fw_printenv 'mpurate' 2>/dev/null | sed "s/mpurate=//g" 2>/dev/null)
	[ "$VAL" ]
	report $? ${FUNCNAME}_mpurate "$VAL MHz" "mpurate reported by U-Boot"

	test_cpu_frequency
	test_cpu_temperature
}

function test_gpu {
	[ -r /proc/pvr/version ]
	report $? ${FUNCNAME} "$(cat /proc/pvr/version 2>/dev/null)" "GPU device [no kernel driver]"
}

function test_uboot {
	VAL=$(strings /dev/mtd1ro 2>/dev/null | fgrep U-Boot | head -1 )
	# here we could test the U-Boot compilation date to be recent enough
	[ "$VAL" ]
	report $? ${FUNCNAME} "$VAL" "Version string of U-Boot in NAND"
}

function test_si47xx {
	(cd /root && make si4721 >/dev/null 2>&1)
	VAL=$(echo $(/root/si4721 -d -up -dn))
	case "$VAL" in
		"init resp: 80 get_chiprev resp: 80 1532300000323042 powered off" | \
		"init resp: 80 get_chiprev resp: 80 0532300000323042 powered off" )
			true
			;;
		* )
			false
			;;
	esac
	report $? ${FUNCNAME} "$VAL" "FM TRX"
}

function test_usb_ip {
	read VAL < <(host www.goldelico.com | fgrep 'goldelico.com has address ' | sed "s/[.a-zA-Z]*goldelico\.com has address //g" 2>/dev/null)
	[ "$VAL" = "83.151.26.121" ]
	report $? ${FUNCNAME} "$VAL" "global IP access through Ethernet over USB/WLAN"
}

function test_vibra {
	[ -r /dev/input/rumble ] && ./vibra.py
	report $? ${FUNCNAME} "" "running rumble effect demo"
}

function test_sound {
	test_si47xx
	test_vibra
	# test audio
}

function test_lcd {
	false
	report $? ${FUNCNAME} "" "LCD [test not implemented]"
}

function test_tvout {
	. x >/dev/null
	./tvout 1 2>/dev/null
	report $? ${FUNCNAME} "" "enabling TVOut"
}

function test_tvout_off {
	. x >/dev/null
	./tvout 0 2>/dev/null
	report $? ${FUNCNAME} "" "switching back to LCD"
}

function test_gps {
	GPS=$(/root/gps-on 2>/dev/null)
	report $? ${FUNCNAME}_interface "$GPS" "GPS interface"
	[ "$GPS" ] && read -t 5 LINE <$GPS && echo $LINE | fgrep '$GP
$GNGNS
$PSRF' >/dev/null
	report $? ${FUNCNAME} "$LINE" "GPS startup"
	# check LNA state and voltage VSIM=$(findregulator "VSIM") on GTA04
}

function test_wwan_usb {
	USB=$(lsusb | fgrep "0af0:8800 Option")
	report $? ${FUNCNAME}_option "$USB" "OPTION modem"
	USB=$(lsusb | fgrep "ID 1e2d:00")
	report $? ${FUNCNAME}_gemalto "$USB" "GEMALTO modem"
}

function test_wwan_option {
	# do subtests by sending AT commands
	(cd /root && make femtocom >/dev/null 2>&1)
	WWAN=$(/root/wwan-on 2>/dev/null)
	(echo AT_OID; sleep 1) | ./femtocom "$WWAN" | fgrep ':' >/tmp/$$.values
	cat /tmp/$$.values | while read KEY VAL
		do
			case "$KEY" in
				SN: )
					read IMEI SN < <(echo "$VAL" | sed "s/,/ /g")
					report 0 ${FUNCNAME}_imei "$IMEI" "IMEI"
					report 0 ${FUNCNAME}_serial "$SN" "Serial Number"
					;;
				HWV: )
					report 0 ${FUNCNAME}_hwv "$VAL" "Hardware Version"
					;;
				FWV: )
					report 0 ${FUNCNAME}_fwv "$VAL" "Firmware Version"
					;;
				FBT: )
					report 0 ${FUNCNAME}_fbt "$VAL" "Firmware Build Time"
					;;
				PMN: )
					report 0 ${FUNCNAME}_product_name "$VAL" "Product Name"
					;;
			esac
		done
	#testing "GTM601-Wakeup" "check for 3G Wakeup through AT_ORESET"
	for i in 1 2 3
	do
		if (echo AT_ORESET; sleep 15) | /root/femtocom "$WWAN" >/dev/null | ( evtest /dev/input/incoming & sleep 15; kill $! ) | fgrep -e 'type 1 (Key), code 240 (Unknown), value 1' -e 'type 1 (EV_KEY), code 240 (KEY_UNKNOWN), value 1' 2>/dev/null 1>&2
		then
			true
			break
		fi
	done
	report $? ${FUNCNAME}_3gwoe "$WWAN" "check for 3G Wakeup through AT_ORESET"
}

function test_wwan_hwmon { # $1: on/off
	INA231=$(findhwmon ina231)
	[ "$INA231" ] && LINE="VSYS=$(cat $INA231/in1_input) mV Imodem=$(cat $INA231/curr1_input) mA Pmodem=$(cat $INA231/power1_input) uW Vmodem=$(cat $INA231/in0_input) mV"
	[ "$INA231" ]
	report $? ${FUNCNAME}_$1 "$LINE" "Modem hardware monitor status"
}

function test_wwan_gemalto {
	(cd /root && make femtocom >/dev/null 2>&1)
	WWAN=$(/root/wwan-on 2>/dev/null)

	test_wwan_hwmon on

	(echo AT+CGMI; sleep 0.2
	 echo AT+CGMM; sleep 0.2
	 echo AT+CGMR; sleep 0.2
	 echo AT+CGSN;  sleep 1) | ./femtocom "$WWAN" >/tmp/$$.values
	AT="?"
	cat /tmp/$$.values | while read LINE
		do
		case "$LINE" in
			OK ) ;;
			'' ) ;;
			AT+* ) AT="$LINE" ;;
			* )
				case "$AT" in
					AT+CGMI )
						report 0 ${FUNCNAME}_manufacturer "$LINE" "Manufacturer"
						;;
					AT+CGMM )
						report 0 ${FUNCNAME}_product_name "$LINE" "Product Name"
						;;
					AT+CGMR )
						report 0 ${FUNCNAME}_revision "$LINE" "Revision"
						;;
					AT+CGSN )
						report 0 ${FUNCNAME}_imei "$LINE" "IMEI"
						;;
				esac
				;;
		esac
	done
}

function test_wwan_off {
	# known to fail on GTA04A3
	/root/wwan-off >/dev/null
	report $? ${FUNCNAME} "$WWAN" "WWAN power off"
	## check through lsusb if it is really off
	USB=$(lsusb | fgrep "0af0:8800 Option")
	[ "$USB" ] && report 1 ${FUNCNAME}_option "$USB" "still found OPTION modem"
	USB=$(lsusb | fgrep "ID 1e2d:00")
	[ "$USB" ] && report 1 ${FUNCNAME}_gemalto "$USB" "still found GEMALTO modem"
	test_wwan_hwmon off
}

function test_wwan {
# check for USB presence of either OPTION or Gemalto
	(cd /root && make femtocom >/dev/null 2>&1)
	WWAN=$(/root/wwan-on 2>/dev/null)
	R=$?
	test_wwan_usb
	report $R ${FUNCNAME}_interface "$WWAN" "WWAN interface"
	if [ "$WWAN" ]
	then # was turned on
		case "$WWAN" in
			/dev/ttyHS* ) # OPTION modem
				test_wwan_option
				;;
			/dev/ttyACM* ) # GEMALTO modem
				test_wwan_gemalto
				;;
		esac
	fi
	test_wwan_off
}

function test_bluetooth {
# test if it turns on VAUX4=$(findregulator "VAUX4") on GTA04A[2-4]
	read -t 30 ADDR < <(/root/bt-scan 2>/dev/null | fgrep 'BD Address:' | sed "s/.*: *\([0-9a-fA-F:]*\).*/\1/g")
	[ "$ADDR" ]
	report $? ${FUNCNAME} "$ADDR" "Bluetooth scan"
}

function test_wlan {
#testing "W2CBW003-WLAN-libertas" "check if kernel did load libertas driver"
#rfkill unblock wifi
#( lsmod | fgrep libertas_sdio >/dev/null ) && ok || nok

#testing "W2CBW003-WLAN-IF" "find the interface"
#WLANIF=$(iwconfig 2>/dev/null | fgrep wlan | (read -t 5 IF X Y ESSID; echo $IF))	# WLAN should have been configured while bluetooth was starting; but iwconfig may block
#[ "$WLANIF" ] && ok "$WLANIF" || nok "$WLANIF"

	read -t 30 ADDR < <(/root/wlan-scan 2>/dev/null)
	[ "$ADDR" ]
	report $? ${FUNCNAME} "$ADDR" "WLAN scan"

#testing "W2CBW003-WLAN-IFDOWN" "disable WLAN"
#ifconfig $WLANIF down 2>/dev/null &&

}

function test_all {
	test_startup
	test_leds_on
	test_sensors
	test_inputs
	test_camera
	test_misc
	test_leds
	test_power
	test_memory
	test_cpu
	test_gpu
	test_uboot
	test_usb_ip
	test_lcd
	test_tvout
	sleep 1 # do only shortly since TV-out disturbs the aux mic input
	test_tvout_off
	test_sound
	test_gps
	test_wwan
	test_bluetooth
	test_wlan
}

if [ "$1" = "-t" ]
then
	echo "known tests:"
	declare -F | sed 's/declare -f //' | fgrep test_ | sed 's/test_//'
	exit 0
fi

TEST="$1"; [ "$1" ] || TEST="all"
TEST=$(echo "$TEST" | sed 's|test_||') # strip off test_ if already given

# run selected test function

if [ "$(type -t test_$TEST)" == "function" ]
then
	test_$TEST "$@"
else
	echo "Test not recognised: $TEST"
	# could check for similar names and report "did you mean ..."
	echo "known tests:" $(declare -F | sed 's/declare -f //' | fgrep test_ | sed 's/test_//')
	exit 1
fi

killall -9 arecord aplay 2>/dev/null # stop any running audio forwarding

# show status through all colored LEDs
(
if $ANYNOK
then # red
	report 1 "Summary" "$(date)" "global test result"
	ON=red
	OFF=green
else
	report 0 "Summary" "$(date)" "global test result"
	ON=green
	OFF=red
fi
for i in /sys/class/leds/*$ON*
do
	echo default-on >$i/trigger
	echo 255 >$i/brightness
done
for i in /sys/class/leds/*$OFF*
do
	echo default-on >$i/trigger
	echo 0 >$i/brightness
done
for i in /sys/class/leds/*blue*
do
	echo default-on >$i/trigger
	echo 0 >$i/brightness
done
) 2>/dev/null

sync	# so that we can almost safely switch off the device after running the test

$ANYNOK && exit 1 || exit 0
