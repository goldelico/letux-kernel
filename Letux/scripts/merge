#!/bin/bash
#
# Letux/scripts/merge [ -p ] { branches... }
#
# merge Letux feature branches on top of current Linux branch
# the current Linux branch is the highest numbered one starting
#  with at least two digits separated by a .
# i.e. 3.18, 4,4-rc4, 4.7 qualify while v3.18, 3.x don't
#
# if a file 'mergefile' exists in the current directory
# it will also be included before the branches specified
# on the command line
#
# if a branch is versioned (suffix -v[0-9]), the highest one
# will be taken
#
# result is new branch "letux-next"
#
# options:
#  -p		push --force all branches to 'origin'
#
# Author: <hns@goldelico.com>
# License: GPL V2

PUSH=false

function usage {
	echo "usage: $0 [ -p ] { branches...}"
	echo "  -p	push --force all branches to 'origin'"
	exit 1
}

while [ "$1" ]
do
	case "$1" in
		-p ) PUSH=true; shift ;;
		-* ) echo "unknown option $1"; usage; exit 1 ;;
		* ) break;
	esac
done

LASTKERNEL=$(echo $(git branch | sed 's|^*| |' | grep '^. [0-9].[0-9]' | sort -n | tail -1))

if [ "$(git status -s -uno)" ]
then
	echo there are uncommitted changes!
	echo refusing to overwrite
	exit 1
fi

# try to switch to last kernel
echo "*** checkout $LASTKERNEL ***"
git checkout $LASTKERNEL || exit

echo merging features on top of $LASTKERNEL

echo "*** make a fresh working copy: letux-next ***"
git branch -D letux-next
git checkout -b letux-next $LASTKERNEL || exit

BRANCHES=""

for FEATURE in $(cat mergefile 2>/dev/null) "$@"
do
	case "$FEATURE" in
	'' | -* | '#'* )	continue;;
	esac
	LATEST=$(echo $(git branch | fgrep $FEATURE | sort | tail -1))
	if [ "$LATEST" = "" ]
	then
		echo "*** merging $FEATURE (run git pull -t origin/$FEATURE-Version?) ***"
		BRANCHES="$BRANCHES $FEATURE"	# collect for octopus
	else
		$PUSH && echo "*** merging $FEATURE -> $LATEST and pushing remote ***" || echo "*** merging $FEATURE -> $LATEST ***"
		$PUSH && git push --force origin $LATEST	# update branch on public server
		BRANCHES="$BRANCHES $LATEST"	# collect for octopus
	fi
done

git merge --no-ff --no-edit $BRANCHES || exit	# try to merge all

$PUSH && echo "*** pushing letux-next on remote ***"
$PUSH && git push --force origin letux-next	# update letux-next on public server

echo "*** switched to $(git branch | fgrep '* ' | sed 's/\* //g') ***"
