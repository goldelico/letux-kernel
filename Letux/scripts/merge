#!/bin/bash
#
# Letux/scripts/merge [ -spu ] [ -b base ] { [-]branches... }
#
# merge Letux feature branches on top of the base branch
#
# the current Linux branch is the highest numbered one starting
# with at least two digits separated by a .
# i.e. 3.18, 4,4-rc4, 4.7 qualify while v3.18, 3.x don't
#
# if a file 'mergefile' exists in the current directory
# it will also be included before the branches specified
# on the command line
#
# if a branch is versioned (suffix -v[0-9]), the highest one
# will be taken
#
# default base commit is "letux-base"
#
# result is new branch "letux-$version"
#
# options:
#  -s		sequential merge
#  -p		push --force all branches to 'origin'
#
# Author: <hns@goldelico.com>
# License: GPL V2

PUSH=false
SEQUENTIAL=false
BASE=letux-base
HARD=false

function usage {
	echo "usage: $0 [ -s ] [ -p ] { branches...}"
	echo "  -s	sequential merge"
	echo "  -p	push --force all branches to 'origin'"
	echo "  --hard	hard update to remote version"
	echo "  -b base	specify base commit"
	exit 1
}

while [ "$1" ]
do
	case "$1" in
		-p ) PUSH=true; shift ;;
		-s ) SEQUENTIAL=true; shift ;;
		-b ) shift; BASE="$1"; shift ;;
		--hard ) HARD=true; shift ;;
		-* ) echo "unknown option $1"; usage; exit 1 ;;
		* ) break;
	esac
done

if [ "$(git status -s -uno)" ]
then
	echo there are uncommitted changes!
	echo refusing to overwrite
	exit 1
fi

VERSION=$(git log -1 -E --grep="^Merge tag 'v[0-9].[0-9]" --format=oneline "$BASE" | sed "s|.*Merge tag 'v\(.*\)' into .*|\1|g")

if ! [ "$VERSION" ]
then
	echo could not determine Linux version of "$BASE"
	exit 1
fi

# try to switch to base
echo "*** checkout "$BASE" ($VERSION) ***"
git checkout "$BASE" || exit
$PUSH && { git push origin "$BASE"; }	# update on public server (if possible)

echo merging features on top of "$BASE" for $VERSION

OUTPUT="letux-$VERSION"

# append all additionally merged branches
for FEATURE
do
	F=$(basename -- "$FEATURE")
	case "$FEATURE" in
		-* ) # will be ignored
			OUTPUT="$OUTPUT-$F"
			;;
		* )
			OUTPUT="$OUTPUT+$F"
			;;
	esac
done

echo "*** make a fresh working copy: $OUTPUT ***"
git branch -D $OUTPUT 2>/dev/null
git checkout -b $OUTPUT HEAD || exit

BRANCHES=""

function process {
	FEATURE=$1
	case "$FEATURE" in
		'-'* )
			return
			;;	# disabled
	esac
#	echo "*** process $FEATURE ***"
	LATEST=$(echo $(git branch | grep "${FEATURE}-v[0-9]*" | perl -e 'print sort{length($a)<=>length($b) or $a cmp $b} <>' | tail -1))
	if [ "$LATEST" ]
	then # there is a latest with -v
		echo "*** merging $FEATURE -> $LATEST ***"
		FEATURE="$LATEST"	# take latest instead
	elif git show-ref --verify --quiet "refs/heads/${FEATURE}" >/dev/null
	then # a local version w/o -v exists
		echo "*** merging $FEATURE ***"
	else # nothing exists locally - check with remote
		LATEST=$(echo $(git branch -r | grep "${FEATURE}-v[0-9]*" | sed 's|origin/||' | perl -e 'print sort{length($a)<=>length($b) or $a cmp $b} <>' | tail -1))
		if [ "$LATEST" ]
		then # there is a remote latest with -v
			echo "*** checking out and merging $FEATURE -> $LATEST ***"
			git checkout --track origin/$LATEST
			FEATURE="$LATEST"	# take new one instead
		elif git ls-remote --heads --quiet origin "${FEATURE}" >/dev/null
		then # a remote version w/o -v exists
			echo "*** checking out and merging $FEATURE ***"
			git checkout --track origin/$FEATURE
		else
			echo "*** $FEATURE nowhere found ***"
			exit 1
		fi
	fi
	if $HARD
	then
		echo "*** resetting $FEATURE to origin/$FEATURE ***"
		# this throws away local commits!
		git checkout --force $FEATURE || exit
		git reset --hard origin/$FEATURE || exit
		git checkout $OUTPUT || exit
	fi
	if $PUSH
	then
		echo "*** pushing $FEATURE to origin ***"
		git push --force origin $FEATURE:$FEATURE || exit;	# update branch on public server
	fi
	BRANCHES="$BRANCHES $FEATURE"	# collect for octopus
	if $SEQUENTIAL
	then
		git merge --no-ff --no-edit $FEATURE || exit	# try to merge one after the other
	fi
}

# feature branches provided in mergefile
while read FEATURE IGNORE
do
	case "$FEATURE" in
		'' | '#'* )
			;;	# ignore empty lines and comments
		* )
			# check if there is an -branch ignore pattern
			for IGNORE
			do
				if [ "$IGNORE" = "-$FEATURE" ]
				then
					continue 2;	# found in ignore list
				fi
			done
			process "$FEATURE"
			;;
	esac
done <Letux/scripts/mergefile

# more feature branches provided on command line
for FEATURE
do
	case "$FEATURE" in
		-* ) # ignore
			;;
		* )
			process "$FEATURE"
			;;
	esac
done

if ! $SEQUENTIAL
then # octopus
	echo "*** Octopus Merge ***"
	git merge --no-ff --no-edit $BRANCHES || exit	# try to merge all
fi

$PUSH && echo "*** pushing $OUTPUT to remote ***"
$PUSH && { git push --force origin $OUTPUT || exit; }	# update letux-$VERSION on public server

echo "*** switched to $(git branch | fgrep '* ' | sed 's/\* //g') ***"
