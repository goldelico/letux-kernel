#!/bin/bash
#
# Letux/scripts/merge [ -p ] { branches... }
#
# merge Letux feature branches on top of current Linux branch
# the current Linux branch is the highest numbered one starting
#  with at least two digits separated by a .
# i.e. 3.18, 4,4-rc4, 4.7 qualify while v3.18, 3.x don't
#
# if a file 'mergefile' exists in the current directory
# it will also be included before the branches specified
# on the command line
#
# if a branch is versioned (suffix -v[0-9]), the highest one
# will be taken
#
# result is new branch "letux-$version"
#
# options:
#  -s		sequential merge
#  -p		push --force all branches to 'origin'
#
# Author: <hns@goldelico.com>
# License: GPL V2

PUSH=false
SEQUENTIAL=false

function usage {
	echo "usage: $0 [ -s ] [ -p ] { branches...}"
	echo "  -s	sequential merge"
	echo "  -p	push --force all branches to 'origin'"
	exit 1
}

while [ "$1" ]
do
	case "$1" in
		-p ) PUSH=true; shift ;;
		-s ) SEQUENTIAL=true; shift ;;
		-* ) echo "unknown option $1"; usage; exit 1 ;;
		* ) break;
	esac
done

if [ "$(git status -s -uno)" ]
then
	echo there are uncommitted changes!
	echo refusing to overwrite
	exit 1
fi

VERSION=$(git log -1 -E --grep="^Merge tag 'v[0-9].[0-9]" --format=oneline | sed "s|.*Merge tag 'v\(.*\)' into .*|\1|g")

if ! [ "$VERSION" ]
then
	echo could not determine Linux version of letux-base
	exit 1
fi

# try to switch to base
echo "*** checkout letux-base ***"
git checkout letux-base || exit
$PUSH && { git push origin letux-base; }	# update letux-base on public server

echo merging features on top of letux-base for $VERSION

echo "*** make a fresh working copy: letux-$VERSION ***"
git branch -D letux-$VERSION 2>/dev/null
git checkout -b letux-$VERSION HEAD || exit

BRANCHES=""

for FEATURE in $(cat Letux/scripts/mergefile 2>/dev/null) "$@"
do
	case "$FEATURE" in
	'' | -* | '#'* )	continue;;
	esac
	LATEST=$(echo $(git branch | fgrep "${FEATURE}-v" | sort | tail -1))
	if [ "$LATEST" = "" ]
	then
		echo "*** merging $FEATURE (run git pull -t origin/$FEATURE-Version?) ***"
	else
		echo "*** merging $FEATURE -> $LATEST ***"
		FEATURE="$LATEST"	# take latest instead
	fi
	if $PUSH
	then
		echo "*** pushing $FEATURE to origin ***"
		git push --force origin $FEATURE:$FEATURE || exit;	# update branch on public server
	fi
	BRANCHES="$BRANCHES $FEATURE"	# collect for octopus
	if $SEQUENTIAL
	then
		git merge --no-ff --no-edit $FEATURE || exit	# try to merge one after the other
	fi
done

if ! $SEQUENTIAL
then # octopus
	echo "*** Octopus Merge ***"
	git merge --no-ff --no-edit $BRANCHES || exit	# try to merge all
fi

$PUSH && echo "*** pushing letux-$VERSION to remote ***"
$PUSH && { git push --force origin letux-$VERSION || exit; }	# update letux-$VERSION on public server

echo "*** switched to $(git branch | fgrep '* ' | sed 's/\* //g') ***"
