#
# GTA04 hardware test script
# (c) Golden Delicious Computers GmbH&Co. KG, 2011-2014
# licenced under GPL
#

TESTER_VERSION="3.9"
TESTER_RECOMMENDED_KERNEL="3.18"
TESTER_DATE="24 Oct 2014"

trap "killall hciattach arecord aplay 2>/dev/null" EXIT
trap "exit 1" SIGHUP SIGINT SIGTERM

make femtocom si4721 >/dev/null

# call e.g. as: testing "GTM601" "test if we can access"

ANYNOK=false

function testing {
	TEST="$1"
	MESSAGE=
	[ "$2" ] && MESSAGE="# $2"
	OK=false
	NOK=true
}

# (n)ok "value" (optional)

SEQUENCE=1
function ok {
	echo $SEQUENCE "$TEST" ok "$1" $MESSAGE
	SEQUENCE=$(expr $SEQUENCE + 1)
	OK=true
	NOK=false
}

function nok {
	if "$NOK"
	then
		echo $SEQUENCE "$TEST" nok "$1" $MESSAGE
		SEQUENCE=$(expr $SEQUENCE + 1)
		ANYNOK=true
	fi
}

testing "Tests-Start"
ok "$(date)"

testing "Tests-Version"
ok "$TESTER_VERSION"

testing "Tests-Kernel"
ok "$(uname -rv) - recommended: $TESTER_RECOMMENDED_KERNEL"

testing "Tests-Rootfs"
if fgrep -q 'root=/dev/mmcblk' /proc/cmdline
then ok "SD"
else ok "NAND"
fi

function findiio {
for iiodev in /sys/bus/iio/devices/iio:device*
do
	if [ "$(cat $iiodev/name 2>/dev/null)" = "$1" ]
		then echo $iiodev
		break
	fi
done
}

testing "Tests-Version-Detected"
[ -r /proc/device-tree ] && ok "3.14ff - with DT" || nok "3.14ff - without DT"

testing "Device-Tree-Model" "model from Device Tree"
VAL=$(cat /proc/device-tree/model 2>/dev/null)
[ "$VAL" ] && ok "$VAL" || nok "$VAL"

testing "LED" "enable LEDs"
( echo 31 >/sys/class/leds/gta04:red:power/brightness &&
echo 255 >/sys/class/leds/gta04:green:power/brightness &&
echo 31 >/sys/class/leds/gta04:red:aux/brightness &&
echo 255 >/sys/class/leds/gta04:green:aux/brightness ) 2>/dev/null &&
ok || nok

testing "BMP085" "Barometer values"
PRESSURE=$(cat /sys/bus/i2c/devices/1-0077/pressure0_input 2>/dev/null)
CENTIGRADE=$(cat /sys/bus/i2c/devices/1-0077/temp0_input 2>/dev/null)
PRESSURE=$(expr "${PRESSURE:=0}" / 100)
CENTIGRADE=$(expr "${CENTIGRADE:=0}" / 10)
[ "${PRESSURE:=-1}" -ge 850 -a "$PRESSURE" -le 1150 -a "${CENTIGRADE:=-1}" -ge 20 -a "$CENTIGRADE" -le 60 ] && ok "${PRESSURE} mBar, ${CENTIGRADE} °C" || nok "${PRESSURE} mBar, ${CENTIGRADE} °C"

testing "ITG3200" "Gyroscope values"
GYRO=$(findiio itg3200)
# FIXME: must read values through IIO or evtest
echo 10 >$GYRO/sampling_frequency 2>/dev/null
sleep 1
X=$(cat $GYRO/in_anglvel_x_raw 2>/dev/null)
Y=$(cat $GYRO/in_anglvel_y_raw 2>/dev/null)
Z=$(cat $GYRO/in_anglvel_z_raw 2>/dev/null)
CENTIGRADE=$(echo | awk "{ printf \"%.0f\", ( $(cat $GYRO/in_temp_raw 2>/dev/null) + $(cat $GYRO/in_temp_offset 2>/dev/null) ) * $(cat $GYRO/in_temp_scale 2>/dev/null) * 10 }" 2>/dev/null)
G=$(expr ${X:=0} '*' ${X} + ${Y:=0} '*' ${Y} + ${Z:=0} '*' ${Z})
GMAX=$(expr 3 '*' 200 '*' 200)
CENTIGRADE=$(expr "${CENTIGRADE:=0}" / 10)
[ "$G" -le "$GMAX" -a "$G" -ge 0 -a "$CENTIGRADE" -ge 20 -a "$CENTIGRADE" -le 60 ] && ok "$X, $Y, $Z, ${CENTIGRADE} °C" || nok "$GYRO: $X, $Y, $Z, ${CENTIGRADE} °C"

testing "BMA180" "Accelerometer values"
[ -r /dev/input/accel ] && read -t 1 X Y Z < <(echo $(evtest /dev/input/accel | head -19 | fgrep Value | sed 's/Value//g'))
G=$(expr ${X:=0} '*' ${X} + ${Y:=0} '*' ${Y} + ${Z:=0} '*' ${Z})
GMIN=$(expr 200 '*' 200)
GMAX=$(expr 300 '*' 300)
[ "$G" -le "$GMAX" -a "$G" -ge "$GMIN" ] && ok "$X, $Y, $Z" || nok "$X, $Y, $Z"

testing "HMC5883L" "Compass values"
COMPASS=$(findiio hmc5883l)
echo 15 >$COMPASS/in_magn_sampling_frequency 2>/dev/null
sleep 1
X=$(cat $COMPASS/in_magn_x_raw 2>/dev/null)
Y=$(cat $COMPASS/in_magn_y_raw 2>/dev/null)
Z=$(cat $COMPASS/in_magn_z_raw 2>/dev/null)
[ "$X$Y$Z" ] && ok "$X, $Y, $Z" || nok "$COMPASS: $X, $Y, $Z"

testing "TSC2007" "Touch screen values"
read VAL < <(sed "s/,/ /g" /sys/bus/i2c/devices/1-0048/values 2>/dev/null)
[ "$VAL" ] && ok "$VAL" || nok "$VAL"

testing "OV9655" "Camera device found"
[ -r /dev/v4l-subdev8 ] && ok || nok

testing "PVR/SGX" "GPU device found"
[ -r /proc/pvr/version ] && ok $(cat /proc/pvr/version) || nok

testing "TPS61050" "Torch/Flash I2C response"
[ -r /sys/bus/i2c/devices/1-0033 ] && ok || nok

testing "M24LR64" "RFID-EEPROM found"
[ -r /sys/bus/i2c/devices/1-0050/eeprom ] && ok || nok

testing "Si47xx" "FM TRX"
VAL=$(echo $(./si4721 -d -up -dn))
case "$VAL" in
	"init resp: 80 get_chiprev resp: 80 1532300000323042 powered off" | \
	"init resp: 80 get_chiprev resp: 80 0532300000323042 powered off" )
		ok "$VAL" ;;
	* )	nok "$VAL" ;;
esac

testing "TCA6507" "LED controller found"
[ -d /sys/bus/i2c/devices/1-0045/leds ] && ok || nok

testing "Batt-Volt" "main battery voltage"
VOLT=$(cat /sys/devices/madc-hwmon.*/in12_input 2>/dev/null)
[ "${VOLT:=-1}" -ge 3100 -a "$VOLT" -le 4300 ] && ok "${VOLT} mV" || nok "${VOLT} mV"

testing "Batt-Status" "main battery USB charging status"
STATUS=$(cat /sys/class/power_supply/twl4030_usb/status 2>/dev/null)
[ "$STATUS" ] && ok "$STATUS" || nok "$STATUS"

testing "Batt-Temp" "main battery temperature (may not be real value if there is no NTC - and if not charging)"
TEMP=$(cat /sys/devices/madc-hwmon.*/temp1_input 2>/dev/null)
[ "${TEMP:=-1}" -ge 20 -a "$TEMP" -le 60 ] && ok "${TEMP} °C" || nok "${TEMP} °C"

testing "Batt-Type" "main battery identification"
TYPE=$(cat /sys/devices/madc-hwmon.*/in0_input 2>/dev/null)
[ "${TYPE:=-1}" ] && ok "${TYPE} mV" || nok "${TYPE} mV"

testing "Batt-Backup" "backup battery voltage"
VOLT=$(cat /sys/devices/madc-hwmon.*/in9_input 2>/dev/null)
[ "${VOLT:=-1}" -ge 200 -a "$VOLT" -le 3250 ] && ok "${VOLT} mV" || nok "${VOLT} mV"

testing "Batt-Volt-HDQ" "main battery voltage (hdq)"
VOLT=$(cat /sys/class/power_supply/bq27000-battery/voltage_now 2>/dev/null)
VOLT=$(expr "${VOLT:=0}" / 1000)
[ "${VOLT:=-1}" -ge 3100 -a "$VOLT" -le 4300 ] && ok "${VOLT} mV" || nok "${VOLT} mV"

# does not reflect which device tree we have booted since there is no saveenv
if false; then
testing "Device-Tree" "Board variant stored in u-boot environment"
read VAL < <(fw_printenv 'devicetree' 2>/dev/null | sed "s/board=//g" 2>/dev/null)
[ "$VAL" ] && ok "$VAL" || nok "$VAL"
fi

testing "CPU-Memory" "Memory size (/proc/meminfo)"
read VAL < <(fgrep MemTotal /proc/meminfo | sed "s/MemTotal.*:/ /g" 2>/dev/null)
[ "$VAL" ] && ok "$VAL" || nok "$VAL"

testing "CPU-NAND" "NAND size (/proc/mtd)"
read MTD VAL OTHER < <(fgrep "File System" /proc/mtd)
[ "$VAL" ] && ok "$(expr $(printf "%d\n" 0x$VAL) / 1000) kB" || nok "$VAL"

testing "CPU-ID" "Die-ID stored in u-boot environment"
read VAL < <(fw_printenv 'dieid#' 2>/dev/null | sed "s/dieid#=//g" 2>/dev/null)
[ "$VAL" ] && ok "$VAL" || nok "$VAL"

testing "CPU-MPUrate" "mpurate reported by U-Boot"
read VAL < <(fw_printenv 'mpurate' 2>/dev/null | sed "s/mpurate=//g" 2>/dev/null)
[ "$VAL" ] && ok "$VAL MHz" || nok "$VAL"

testing "U-Boot version" "Version string of U-Boot"
VAL=$(strings /dev/mtd1ro | fgrep U-Boot | head -1 )
# here we could test the U-Boot compilation date to be recent enough
[ "$VAL" ] && ok "$VAL" || nok "$VAL"

testing "USB-IP" "IP access through Ethernet over USB"
read VAL < <(host www.goldelico.com | fgrep 'goldelico.com has address ' | sed "s/[.a-zA-Z]*goldelico\.com has address //g" 2>/dev/null)
[ "$VAL" = "83.151.26.121" ] && ok "$VAL" || nok "$VAL"

testing "Vibra" "running rumble effect demo"
./vibra.py && ok || nok

testing "Sound" "enabling sound"
killall -9 arecord aplay 2>/dev/null # stop any running audio forwarding (or amixer commands will fail)
sleep 1
amixer -q set "AVADC Clock Priority" "HiFi high priority" &&
amixer -q set "DAC1 Analog" off &&
amixer -q set "DAC2 Analog" on &&
amixer -q set "DAC2 Analog" 5 &&	# so that total gain is < 1
amixer -q set "Codec Operation Mode" "Option 2 (voice/audio)" &&
amixer -q set Earpiece 100% &&
amixer -q set "Earpiece Mixer AudioL2" on &&
amixer -q set "Earpiece Mixer Voice" off &&
amixer -q set "Analog" 5 &&
amixer -q set TX1 "Analog" &&
amixer -q set "TX1 Digital" 12 &&
amixer -q set "Analog Left AUXL" nocap &&
amixer -q set "Analog Right AUXR" nocap &&
amixer -q set "Analog Left Main Mic" cap &&
amixer -q set "Analog Left Headset Mic" nocap &&
amixer -q set HandsfreeL on &&
amixer -q set HandsfreeR on &&
amixer -q set "HandsfreeL Mux" AudioL2 &&
amixer -q set "HandsfreeR Mux" AudioR2 &&
aplay -q /usr/share/sounds/alsa/Front_Center.wav &&
ok || nok
$OK && amixer -q set "Analog" 3 && (arecord | tee /tmp/echo.wav | aplay) >/dev/null 2>&1 &	# run sound echo

testing "TVout" "enabling TVout"
./tvout 1 2>/dev/null && ok || nok

sleep 1	# do only shortly since TV-out disturbs the aux mic input

testing "TVout-off" "switching back to LCD"
./tvout 0 2>/dev/null && ok || nok

testing "GTM601-USB" "check internal USB port"
rfkill unblock wwan
sleep 5
if lsusb | fgrep '0af0:8800 Option' >/dev/null
then # found
	ok
else
	nok
fi

testing "GTM601-Device" "find out application port"
for i in $(cd /sys/class/tty/ && echo ttyHS*)
	do
	T=
	if [ "$(cat /sys/class/tty/$i/hsotype 2>/dev/null)" = Application ]
	then
		UMTSDEV="/dev/$i"
		ok "$UMTSDEV"
		break
	fi
done
nok

if $OK
	then
	testing "GTM601-IMEI" "read IMEI, Serial, versions etc."
	(echo AT_OID; sleep 1) | ./femtocom "$UMTSDEV" | fgrep ':' >/tmp/$$.values
	while read KEY VAL
	do
	case "$KEY" in
		SN: )	read IMEI SN < <(echo "$VAL" | sed "s/,/ /g")
			testing "GTM601-IMEI" "IMEI"
			ok "$IMEI"
			testing "GTM601-SN" "Serial Number"
			ok "$SN"
			;;
		HWV: )	testing "GTM601-HWV" "Hardware Version"
			ok "$VAL"
			;;
		FWV: )	testing "GTM601-FWV" "Firmware Version"
			ok "$VAL"
			;;
		FBT: )	testing "GTM601-FBT" "Firmware Build Time"
			ok "$(echo "$VAL" | sed 's/.*(Date: \(.*\), Time: \(.*\)).*/\1,\2/g')"
			;;
		PMN: )	testing "GTM601-PMN" "Product Name"
			ok "$VAL"
			;;
	esac
	done </tmp/$$.values
	nok

	testing "GTM601-Wakeup" "check for 3G Wakeup through AT_ORESET"
	for i in 1 2 3
		do
		if (echo AT_ORESET; sleep 15) | /root/femtocom "$UMTSDEV" >/dev/null | ( evtest /dev/input/incoming & sleep 15; kill $! ) | fgrep -e 'type 1 (Key), code 240 (Unknown), value 1' -e 'type 1 (EV_KEY), code 240 (KEY_UNKNOWN), value 1' 2>/dev/null 1>&2
			then
			ok "$LINE"
			break
		fi
		done
	nok
fi

# enable antenna power
rfkill unblock gps

testing "W2SG0004" "UART2 and GPS receiver"
for i in 1 2 3 4 5
	do
	if read -t 5 </dev/ttyO1 LINE && echo $LINE | fgrep '$GP
$PSRF' >/dev/null
	then
		ok "$LINE"
		break
	fi
	(
		stty 9600
		sleep 2
		# check LNA state and voltage
		cat /sys/bus/platform/devices/48070000.i2c:twl@48:regulator-vsim/regulator/regulator.*/state
		cat /sys/bus/platform/devices/48070000.i2c:twl@48:regulator-vsim/regulator/regulator.*/microvolts
	) </dev/ttyO1
done
nok

testing "W2CBW003-BT UART" "Bluetooth/WLAN power, UART1, Bluetooth and initial baudrate"
rfkill unblock bluetooth
for BTBAUD in 3000000 921600 115200
	do
	killall hciattach 2>/dev/null	# stop any running daemon
	hciattach -s $BTBAUD /dev/ttyO0 any $BTBAUD flow 2>/dev/null >&2	# start daemon at current speed
	sleep 2
	if hciconfig hci0 up 2>/dev/null	# try to enable Bluetooth interface
		then # successfull at this speed
		ok $BTBAUD
		break
	fi
done
nok

if $OK
then # run additional Bluetooth tests
	if [ $BTBAUD != "3000000" ]
		then	# not yet at 3 MBit/s - switch to 3 MBit/s
		testing "W2CBW003-BT-Highspeed" "try to temporarily go up to 3 MBit/s"
		bccmd -d hci0 psset baudrate 12288 2>/dev/null &&
		bccmd -d hci0 warmreset 2>/dev/null &&	# temporarily go up to 3 MBit/s
		killall hciattach 2>/dev/null
		hciattach -s 3000000 /dev/ttyO0 any 3000000 flow 2>/dev/null >&2 &&	# restart daemon at 3 MBit/s
		hciconfig hci0 up 2>/dev/null &&
		ok "3000000" || nok
		if $OK
			then
			testing "W2CBW003-BT-Program" "try to program boot baudrate to 3 MBit/s"
			bccmd -d hci0 psset -s 0x1 baudrate 12288	# reprogram the boot baudrate
			ok "programmed" || nok "not programmed"
		fi
	fi
	testing "W2CBW003-BT-BootBaud" "read boot baudrate"
	read VAL < <(bccmd -d hci0 psget -s 0x1 baudrate 2>/dev/null | sed "s/UART Baud rate:.*(\(.*\))/\1/g")
	VAL=$(expr "${VAL:=0}" '*' 1000000 / 4096)
	[ "$VAL" -gt 0 ] && ok $VAL || nok $VAL
	testing "W2CBW003-BT-MAC" "read MAC address"
	BTMAC=$(hciconfig -a | fgrep 'BD Address' | cut -d ' ' -f 3-3)
	[ "$BTMAC" ] && ok "$BTMAC" || nok "$BTMAC"
fi
if $OK
then # scan
	testing "W2CBW003-BT-Scan" "scan for Bluetooth Base station"
	for i in 1 2 3 4 5
		do
		BASE=$(hcitool scan --refresh | fgrep --invert-match Scanning | head -1 | cut -f 2)	# try to locate base station
		if [ "$BASE" ]
		then
			ok $BASE	# found
			break
		fi
	done
	nok
fi

killall hciattach 2>/dev/null	# stop any running daemon

testing "W2CBW003-WLAN-libertas" "check if kernel did load libertas driver"
rfkill unblock wifi
( lsmod | fgrep libertas_sdio >/dev/null ) && ok || nok

testing "W2CBW003-WLAN-IF" "find the interface"
WLANIF=$(iwconfig 2>/dev/null | fgrep wlan | (read -t 5 IF X Y ESSID; echo $IF))	# WLAN should have been configured while bluetooth was starting; but iwconfig may block
[ "$WLANIF" ] && ok "$WLANIF" || nok "$WLANIF"

if $OK
then # run additional WLAN tests
	testing "W2CBW003-WLAN-IFUP" "check if ifup works"
	ifconfig $WLANIF up && ok || nok
	testing "W2CBW003-WLAN-MAC" "read MAC address"
	WLANMAC=$(ifconfig $WLANIF | fgrep "HWaddr" | (read -t 5 IF L ENC HW MAC; echo $MAC))
	[ "$WLANMAC" ] && ok "$WLANMAC" || nok "$WLANMAC"
fi
if $OK
then # scan
	testing "W2CBW003-WLAN-Scan" "scan for WLAN Base station"
	for i in 1 2 3 4 5
		do
		BASE=$(iwlist $WLANIF scan | fgrep Address: | head -1 | sed 's/.*Address: \([0-9a-fA-F:]*\).*/\1/g')	# try to locate base station
		if [ "$BASE" ]
		then
			ok $BASE	# found
			break
		fi
	done
	nok
	testing "W2CBW003-WLAN-IFDOWN" "disable WLAN"
	ifconfig $WLANIF down 2>/dev/null &&
	ok || nok
fi

killall -9 arecord aplay 2>/dev/null # stop any running audio forwarding

testing "Tests-End" "Summary of all tests"
$ANYNOK && nok "$(date)" || ok "$(date)"
if $ANYNOK
then # red
	(
	echo 255 >/sys/class/leds/gta04:red:power/brightness
	echo 0 >/sys/class/leds/gta04:green:power/brightness
	echo 255 >/sys/class/leds/gta04:red:aux/brightness
	echo 0 >/sys/class/leds/gta04:green:aux/brightness
	echo 255 >/sys/class/leds/gta04:left/brightness
	echo 255 >/sys/class/leds/gta04:right/brightness
	) 2>/dev/null
else # green
	(
	echo 0 >/sys/class/leds/gta04:red:power/brightness
	echo 255 >/sys/class/leds/gta04:green:power/brightness
	echo 0 >/sys/class/leds/gta04:red:aux/brightness
	echo 255 >/sys/class/leds/gta04:green:aux/brightness
	echo 0 >/sys/class/leds/gta04:left/brightness
	echo 0 >/sys/class/leds/gta04:right/brightness
	) 2>/dev/null
fi

sync	# so that we can safely switch off the device after test

$ANYNOK && exit 1 || exit 0
