# Solomon SSD2858 chip with input stream from OMAP5 and panel chained to the output
# using the panel-mipi-debug driver

if ! [ "$(cat /proc/device-tree/ocp/dss@58000000/encoder@58004000/lcd/compatible)" = "omapdss,mipi,debug" ]
then
	echo this script needs the mipi-debug driver!
	echo use ./panelselect and choose the 'n' driver
	exit 1
fi

./bl 1

if [ ! -L dcs ]
then
	rm -rf dcs
	ln -s /sys/devices/44000000.ocp/58000000.dss/58004000.encoder/58004000.encoder:lcd/dcs dcs
fi

# make sure the panel is active before trying to send commands
echo nostream >dcs	# if it was on before
echo stop >dcs	# stop if it was already running
echo nopower >dcs	# enable is unused
echo reset >dcs	# reset panel
# reset panel
echo reset >dcs	# reset panel
sleep .1
echo noreset >dcs	# take panel out of reset before starting the clocks
sleep .2
echo start >dcs	# start MIPI interface
sleep .2

# show some DCS status (don't use echo status >dcs because it reads non-existent registers which makes the chip hang)
for i in 0b 0c 45
	do echo $i r >dcs
done

# DCS sleep out
echo 11 >dcs

# now program the ssd chip

# registers
# 0000   SCM
# 1000   MIPIRX
# 2000   VTCM
# 4000   VCU
# 5000   GPIO
# 6000   MIPITX
# enable video bypass
echo g0014 rrrr >dcs
echo g0014 0C7f800F >dcs
echo g0014 rrrr >dcs
echo g200C 00000004 >dcs
# choose 4-lane mode TX
echo g6008 rrrr >dcs
echo g6008 00C40008 >dcs
echo g6008 rrrr >dcs

# program panel

echo 29 >dcs

echo gff01 >dcs	# enable forwarding through ssd

# this tries to forward DCS commands to the panel
# so that it is possible to inspect the waveforms
# generated by the SSD2858 at the panel interface

if false
then
	while true
	do
		echo 11 >dcs
		echo 10 >dcs
		sleep 0.1
	done
fi

# echo status >dcs
# enable stream and turn display on
# echo stream >dcs
# echo 11 >dcs
# echo 29 >dcs